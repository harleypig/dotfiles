#!/bin/bash

# Debug tty login (ssh user@server):
# ssh -t localhost "PS4='[\$BASH_SOURCE[0]:\$LINENO]: ' bash -xl" |& tee login.log

# Debug no tty login (ssh user@server somecommand)
# ssh localhost "PS4='[\$BASH_SOURCE[0]:\$LINENO]: ' bash -xl" |& tee login.log

#-----------------------------------------------------------------------------
# Use these functions to clean up the environment at end of startup.
#
# Add any various variables or functions that you want to unset to the
# appropriate array.
# 
# Usage:
#   unsetvars 'varname'
#   unsetfuncs 'funcname'

declare -a _unset_vars _unset_funcs

unsetvars() { _unset_vars+=("$@"); }
unsetfuncs() { _unset_funcs+=("$@"); }

#-----------------------------------------------------------------------------
# XXX: FIXME
# Setup for git bash on windows.
# o If MSYS is not set, then link is just a copy of stuff.
# o If MSYS is winsymlinks, it creates a Windows shortcut.
# o If MSYS is winsymlinks:nativestrict, it creates a more real type of symlink
#export MSYS="winsymlinks:nativestrict"

##############################################################################
# Base Global variable and path

#-----------------------------------------------------------------------------
# Assume that this file is in the dotfiles directory, then check if we are
# linnked to the dotfiles directory.  If we are, then use the real directory
# as the dotfiles directory.

declare -x DOTFILES="$HOME"
[[ -L ${BASH_SOURCE[0]} ]] \
  && DOTFILES=$(dirname "$(readlink -nf "${BASH_SOURCE[0]}")")

# Export initial path settings
export PATH="$DOTFILES/lib:$DOTFILES/bin:$PATH"

##############################################################################
# Functions

#-----------------------------------------------------------------------------
# Set a default debug, then check if debug is available and source it.

debug() { true; }
[[ -f "$DOTFILES/bin/debug" ]] && source "$DOTFILES/bin/debug"

#-----------------------------------------------------------------------------
# Add a path to the PATH variable.  This is a function so that we can
# easily add paths to the PATH variable.
#
# Usage:
#   addpath PATH /path/to/add
#   addpath LD_LIBRARY_PATH /path/to/add
#   andpath /path/to/add
#
#   The last one defaults to PATH

# XXX: Convert this to an external library.

addpath() {
  local target="PATH"

  if [[ $1 == "PATH" ]] || {{ $1 == "LD_LIBRARY_PATH" ]]; then
    target="$1"
    shift
  fi

  for p in "$@"; do
    [[ -z $p ]] && continue
    debug "adding $p to $target"
    printf -v "$target" "%s:%s" "${!target}" "$p"
  done
}

unsetfuncs 'addpath'

#-----------------------------------------------------------------------------
# Add custom binary directories to the system's PATH variable, allowing users
# to execute their own scripts and commands from the command line. It reads the
# directory paths from a configuration file and appends them to the PATH
# variable in the specified order.
#
# This is not cumulative, either the defaults or the custom bin dirs are used.

# XXX: Add documentation for deault bin dirs.

set_bin_dirs() {
  bin_dirs_file="$DOTFILES/default-bin-dirs"
  [[ -r "$HOME/.bin-dirs" ]] && bin_dirs_file="$HOME/.bin-dirs"
  readarray -t bin_dirs < <(grep -v '^[[:space:]]*#' "$bin_dirs_file" | envsubst)
  addpath "${bin_dirs[@]}"
}

#-----------------------------------------------------------------------------
load_files() {
  declare -a load_dirs
  load_dirs+=("$DOTFILES/shell_startup.d")
  load_dirs+=("$HOME/.shell_startup.d")

  # Run each directory instead of doing a find on all directories at once
  # because we want these files loaded in this particular order.

  for load_dir in "${load_dirs[@]}"; do
    [[ -d $load_dir ]] || continue

    readarray -t load_files < <(/usr/bin/find "$load_dir" -type f -not -iname '*_inactive' | /usr/bin/sort)

    for f in "${load_files[@]}"; do
      [[ -r $f ]] && source "$f"
    done
  done
}

##############################################################################
# Setup environment

[[ -r "$DOTFILES/shell_startup.d/pre-setup" ]] \
  && source "$DOTFILES/shell_startup.d/pre-setup"

#-----------------------------------------------------------------------------
# Check if various dotfiles are linked properly
[[ -x "$(command -v check-dotfiles 2> /dev/null)" ]] && check-dotfiles

set_bin_dirs
load_files

# XXX: clean the path
