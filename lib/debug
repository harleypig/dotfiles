#!/bin/bash

# XXX: Document me!
# XXX: Test me!

#----------------------------------------------------------------------------
: << POD
=head2 sourced

Usage: sourced || die "Must be sourced."

Returns true (0) or false (1) depending on if we have been sourced.

=cut
POD

sourced() { [[ ${FUNCNAME[1]} == 'source' ]]; }

sourced || {
  echo "debug must only be sourced" >&2
  exit 1
}

export -f sourced

#----------------------------------------------------------------------------
: << POD
=head2 debug

Usage: debug "message"

C<debug> will check if the environment variable C<DEBUG> is true, and if not,
silently return with a 0 return code.

Otherwise, C<debug> will determine the function call stack and C<warn> the
"message" with the stack at the beginning of the line.

Example:

  [somefunc(3):func(99)]: message

=cut
POD

debug() {
  ((DEBUG)) || return 0

  msg="$*"
  (($#)) || { read -rst 1 msg; }

  local lineno func file trace
  local -a el
  local -i lvl=0

  local interactive='I'
  [[ $- == *i* ]] || interactive='i'

  local loginshell='L'
  shopt -q login_shell || loginshell='l'

  local ignore_bats_rx='bats-exec-test|bats\.[0-9]+\.src'

  while true; do
    caller=$(caller $lvl) || break
    # In some instances, ((lvl++)) is causing errors, so do it old school.
    #((lvl++))
    lvl+=1

    read -r lineno func file <<< "$caller"

    # Ignore bats
    [[ $file =~ $ignore_bats_rx ]] && continue

    file="$(basename "$file"):"
    func+=':'

    [[ $func =~ main:|source: ]] && func=

    prefix=$(printf '[%s%s%03d]' "$file" "$func" "$lineno")
    el+=("$prefix")
  done

  for ((ix = ${#el[@]} - 1; ix >= 0; ix--)); do
    trace+="${el[ix]}"
  done

  printf '[%s%s]%s %s\n' "$interactive" "$loginshell" "$trace" "$msg" >&2
}

export -f debug
