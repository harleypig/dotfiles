#!/bin/bash

# XXX: try/catch?
# XXX: exceptions? some kind of error-handling
# XXX: import option so only 'source utility func1 func2 ...' is ever needed
# XXX: logging (more than debug?)
# XXX: locking
# XXX: queue handling
# XXX: parallel processes
# XXX: ipc
# XXX: parameter handling
# XXX: trap handling
# XXX: signal handling

# Maybe steal some ideas from:
# https://github.com/niieani/bash-oo-framework

#----------------------------------------------------------------------------
[[ -r "$GLOBAL_LIB/Debug" ]] && source "$GLOBAL_LIB/Debug"

#----------------------------------------------------------------------------
# Documentation

: << POD
=head1 NAME

utility - utilities used in libraries

=head1 SYNOPSIS

  source utility

=head1 OPTIONS

There are no options for this file

=head1 DESCRIPTION

This file contains various utility functions that are used in library files,
and can be used in any bash based script.

=head1 NOTES

This file will run various checks, detailed below.

=head2 Enviroment Check

If this file is not being called in a bash environment, or as a bash script,
it will exit with an error message.

=head2 Check If Sourced

If this file is not sourced, e.g. C<source utility>, this file will exit with
an error message.

If this file is called with C<-?>, C<-h> or C<--help> a usage message will be
shown instead of an error message.

=head1 FUNCTIONS

=cut
POD

#----------------------------------------------------------------------------
: << POD
=head2 warn

Usage: warn "message"

C<warn> will print whatever is sent to it to STDERR.

Equivalent to C<echo 'Message' E<gt>&2>

=cut
POD

warn() { printf '%s\n' "$*" >&2; }

#----------------------------------------------------------------------------
: << POD
=head2 die

Usage: die "message"
       die 2 "message"
       someprog || die "message"

C<die> will call C<warn> with "message" and then C<exit 1>.

C<die> returns the most recent return code unless you provide a status code as
the second parameter.

=cut
POD

die() {
  # Grab most recent return code
  local rc=$?

  if is_integer "$1"; then
    rc=$1
    shift
  fi

  (($#)) && warn "$*"

  [[ $rc -eq 0 ]] && rc=1

  exit "${rc:-1}"
}

#----------------------------------------------------------------------------
: << POD
=head2 verbose

Usage: verbose "message"

C<verbose> will check if the environment variable C<VERBOSE> is true, and if not,
silently return with a 0 return code.

Otherwise, C<verbose> will C<warn> the message passed in.

Example:

  verbose 'message to display if VERBOSE=1'

=cut
POD

verbose() { ((VERBOSE)) && warn "$*"; }

#----------------------------------------------------------------------------
: << POD
=head2 verify_filename

Usage: filename=E<36>(verify_filename "E<36>filename") || die "bad filename"

Checks if the value is a valid filename and if it exists is it readable, or if
it does not exist can we create it. If it is readable or creatable, returns 0.
Otherwise returns 1.

This function expects a path to a filename, relative or absolute, and will
print a fully canonicalized path to the filename.

This function expects the path to the filename to exist and will return an
error if it does not.

=cut
POD

verify_filename() {
  local filename="$1"

  fqdn="$(readlink -f "$(dirname "$filename")")" || {
    warn "Unable to canonicalize directory for filename:
$(namei -lx "$filename")"
    return 1
  }

  filename="$fqdn/$(basename "$filename")"
  debug "fqfn: $filename"

  if [[ -f $filename ]]; then
    debug "$filename exists ..."

    [[ -r $filename ]] || {
      warn "filename exists but is not readable:
$(namei "$filename")"
      return 1
    }

    debug "... and is readable"

  elif [[ -e $filename ]]; then
    warn "$filename exists but is not a file"
    return 1

  else
    debug "$filename does not exist ..."

    truncate --size 0 "$filename" || {
      warn "$filename does not exist and cannot create it:
$(namei "$filename")"
      return 1
    }

    debug "... and is writable"

    rm "$filename" || die "Unable to remove test file ($filename), exiting."
  fi

  printf '%s' "$filename"
  return 0
}

#-----------------------------------------------------------------------------
: << POD
=head2 fill_template

Usage: newstring=E<36>(fill_template C<string to be processed>)

C<fill_template> will parse the string passed in and replace %WORD% with the
value of the environment variable WORD.

E.g., if environment variable C<PRJHOME> was equal to C</nas_pp/test/cap>,
then the string I<Your home directory is %PRJHOME%.> would be returned as
I<Your home directory is /nas_pp/test/cap.>

If you set DELIM to a single character, that character will be used as
a delimiter instead of '%'.

=cut
POD

# From bash manpage:

# An additional binary operator, =~, is available, with the same precedence as
# == and !=. When it is used, the string to the right of the operator is
# considered an extended regular expression and matched accordingly (as in
# regex(3)). The return value is 0 if the string matches the pattern, and
# 1 otherwise. If the regular expression is syntactically incorrect, the
# conditional expression's return value is 2. If the shell option nocasematch
# is enabled, the match is performed without regard to the case of alphabetic
# characters. Any part of the pattern may be quoted to force the quoted
# portion to be matched as a string. Bracket expressions in regular
# expressions must be treated carefully, since normal quoting characters lose
# their meanings between brackets. If the pattern is stored in a shell
# variable, quoting the variable expansion forces the entire pattern to be
# matched as a string. Substrings matched by parenthesized subexpressions
# within the regular expression are saved in the array variable BASH_REMATCH.
# The element of BASH_REMATCH with index 0 is the portion of the string
# matching the entire regular expression. The element of BASH_REMATCH with
# index n is the portion of the string matching the nth paren‐ thesized
# subexpression.

# XXX: Figure out a way to allow a delimiter to be escaped. E.g., \% should
# not be counted as the start or end of a variable name.

fill_template() {
  debug "Entered ${FUNCNAME[0]} ..."

  [[ -z $1 ]] && Usage "${FUNCNAME[0]} requires a string to process."
  s="$*"

  local DELIM="${DELIM:-%}"
  local regex="$DELIM([^$DELIM]*)$DELIM"
  local rc=0

  [[ $s =~ $regex ]] || {
    rc=$?
    ((rc > 2)) && warn "Unknown error from =~ in fill_template."
    ((rc == 2)) && warn "Syntax error in fill_template's regex."
    ((rc == 1)) && warn "No %variable%'s found in string '%s'."
    return $rc
  }

  while [[ $s =~ $regex ]]; do
    debug "    Match: ${BASH_REMATCH[0]}"
    debug "1st group: ${BASH_REMATCH[1]}"

    # If the variable does not exist in the environment, then warn, otherwise
    # replace with nothing.

    local value

    if [[ -v ${BASH_REMATCH[1]} ]]; then
      value="${!BASH_REMATCH[1]}"

    else
      warn "Variable '${BASH_REMATCH[1]}' does not exist in the environment"
      value="!!${BASH_REMATCH[1]}!!"

    fi

    s=${s//${BASH_REMATCH[0]}/$value}
  done

  debug "rc: $rc"
  ((rc > 0)) && return $rc

  debug "Leaving ${FUNCNAME[0]} ..."
  printf '%s' "$s"
}
