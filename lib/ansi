#!/bin/bash

# Peruse /usr/share/doc/xterm/*

# https://github.com/fidian/ansi has some good ideas, and some interesting
# things to try, but I don't like the way they're doing things. So I'll keep
# my own stuff for now.

# http://mywiki.wooledge.org/BashFAQ/037
# http://wiki.bash-hackers.org/scripting/terminalcodes

# Convert rgb (0-255 0-255 0-255) to 8-bit 0-255
# XXX: Figure out how to do hex

# CF=6/256
# 8bit=$(( 16 + (($1 * $CF) * 36) + (($2 * $CF) * 6) + ($3 * $CF) ))

DEBUG=

function debug() { ((DEBUG)) && echo "$*" >&2; }

function _ansi() {
  # convert convenience values to what tput understands

  local -A color

  color[black]=0
  color[red]=1
  color[green]=2
  color[yellow]=3
  color[blue]=4
  color[purple]=5
  color[cyan]=6
  color[white]=7
  color[bright_black]=8
  color[bright_red]=9
  color[bright_green]=11
  color[bright_yellow]=11
  color[bright_blue]=12
  color[bright_purple]=13
  color[bright_cyan]=14
  color[bright_white]=15

  # shellcheck disable=SC2034
  {
    local fg='setaf'
    local bg='setab'
  }

  local str
  local FIRST=''
  local LAST=''

  while [ $# -ge 1 ]; do
    cmd=$1
    shift

    local seq
    
    case $cmd in
      -sb)
        FIRST='\\['
        LAST='\\]'
        ;;
        
      -n)
        FIRST='\001'
        LAST='\002'
        ;;
        
      bell) seq=$(tput bel) ;;
      reverse | rev) seq=$(tput rev) ;;
      italics_on) seq=$(tput sitm) ;;
      italics_off) seq=$(tput ritm) ;;
      stdout_on) seq=$(tput smso) ;;
      stdout_off) seq=$(tput rmso) ;;
      underline_on) seq=$(tput smul) ;;
      underline_off) seq=$(tput rmul) ;;
      off) seq=$(tput sgr0) ;;

      fg | bg)
        c=$1
        # shellcheck disable=SC2244
        [[ ${color[$c]+isset} ]] && c=${color[$c]}
        seq=$(tput "${!cmd}" $c)
        shift
        ;;

      *) seq=$(tput "$cmd") ;;

    esac
    
    str+="$FIRST$seq$LAST"
  done

  printf '%s' "$str"
  return
}

_ansi "$@"
