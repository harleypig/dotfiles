#!/bin/bash

#############################################################################
# Do we need to show usage and are we being sourced?

declare READ_CFG_SOURCED=0

# shellcheck disable=SC2091
$(return &> /dev/null) && READ_CFG_SOURCED=1

# shellcheck disable=SC1091
source utility

((READ_CFG_SOURCED)) || die "$(basename "$0") must only be sourced."

# shellcheck disable=SC1091
source ParseParams

#############################################################################
# Documentation

# shellcheck disable=SC2154
: << POD
=head1 NAME

ReadCfg - Read lines from a configuration file

=head1 SYNOPSIS

  source ReadCfg
  read_cfg -f $filename

=head1 OPTIONS

  There are no options for sourcing the library itself. For the C<read_cfg>
  and C<read_cfg_line> functions, see below.

=cut
POD

#############################################################################
# shellcheck disable=SC2154
: << POD
=head1 FUNCTIONS

=head2 read_cfg

C<read_cfg> returns a 0 if lines matching the regex are found and 1 if not. If
there are results, an array variable named C<CfgLines> will contain the
results, one line per element.

=head3 -f | --configfile <filename>

The name of the configuration file to be read.  This is a required parameter.

=head3 -r | --regex <regex>

The regular expression to be used.  Defaults to '^$AppName[[:space:]]'.

=cut
POD

declare -a CfgLines

function read_cfg() {
  local DEFAULT_REGEX="^$AppName[[:space:]]"

  local PARMS_DEF="
f|configfile,filename,,,required
r|regex,string,,$DEFAULT_REGEX
"

  parse_params "$PARMS_DEF" "$@" || show_usage

  # shellcheck disable=SC2154
  [[ -r $configfile ]] || die "Unable to read $configfile"

  # shellcheck disable=SC2154
  debug "grep -i $regex $configfile"
  mapfile -t CfgLines < <(grep -i "$regex" "$configfile")
  debug "Found ${#CfgLines[@]} lines."

  [[ ${#CfgLines[@]} -gt 0 ]] && return 0
  return 1
}

#----------------------------------------------------------------------------
: <<POD
=head2 read_cfg_line

read_cfg_line is a special case of read_cfg. This function expects only one
line to match the regex (default or supplied) and reads the result into an
array, one column per element.

=head3 -f | --configfile <filename>

The name of the configuration file to be read.  This is a required parameter.

=head3 -r | --regex <regex>

The regular expression to be used.  Defaults to '^$AppName[[:space:]]'.

=head3 -v | -varname <variablename>

Use C<variablename> to hold the array. This is a required field.

=cut
POD

function read_cfg_line() {
  local PARMS_DEF="
f|configfile,filename,,,required
r|regex,string,,$DEFAULT_REGEX
v|varname,varname,,,required
"

  parse_params "$PARMS_DEF" "$@"

  local arr_name='__array__'
  # shellcheck disable=SC2154
  [[ $varname == "$arr_name" ]] && die "Don't use $arr_name for varname."

  read_cfg -f "$configfile" -r "$regex"

  [[ ${#CfgLines[@]} -eq 0 ]] && {
    warn "No lines found in '$configfile' matching '$regex'."
    return 1
  }

  [[ ${#CfgLines[@]} -gt 1 ]] && {
    warn 'read_cfg_line is expecting at most one line.'
    warn "Found ${#CfgLines[@]} lines matching '$regex' in '$configfile'."
    return 1
  }

  # This is insecure but, in this case, the developer has access to more than
  # this script would.
  eval "$arr_name=(\"\${${varname}[@]}\")"

  # shellcheck disable=SC2154
  [[ ${#__array__[@]} -eq 0 ]] && die "$varname is not an array or is empty"

  # shellcheck disable=SC2086
  read -r ${__array__[*]} <<< "${CfgLines[0]}"

  return 0
}
