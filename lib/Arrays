#!/bin/bash

# Array functions
# with a lot of help from
# https://github.com/dylanaraps/pure-bash-bible

# XXX: Document me!
# XXX: Test me!
# XXX: Only allow sourcing me!

#-----------------------------------------------------------------------------
# split a string ($1) based on delimiter ($2) into an array
# newarray=("$(split '1,2,3,4' ',')")
# newarray=("$(split '1++2++3++4' '++')")

split() {
  #IFS=$'\n' read -d '' -ra work <<< "${1//$2/$'\n'}"
  #printf '%s\n' "${work[@]}"
  printf '%s\n' "${1//$2/$'\n'}"
}

#-----------------------------------------------------------------------------
# unduped=("$(dedupe "${messedarray[@]}")")

dedupe() {
  local -A seen
  local -a work

  for i in "$@"; do
    [[ "${seen[$i]}" -eq 1 ]] && continue
    seen["$i"]=1
    work+=("$i")
  done

  printf '%s\n' "${work[@]}"
}

# - # XXX: move to tools/bin or maybe utility
# - 
# - ##############################################################################
# - # Array functions
# - 
# - # SOMEARRAY=('one' 'two' 'three')
# - # SOMEVAR=$(join_array : 'SOMEARRAY')     => one:two:three
# - # SOMEVAR=$(join_array ' : ' 'SOMEARRAY') => one : two : three
# - 
# - function join_array() {
# -   echo 'join_array is deprecated, use utility and join.array' >&2
# - 
# -   local delim=$1
# -   shift
# - 
# -   local -a array
# -   eval "array=(\"\${$1[@]}\")"
# - 
# -   first="${array[0]}"
# -   rest=("${array[@]:1}")
# - 
# -   printf '%s' "$first"
# -   printf '%s' "${rest[@]/#/$delim}"
# - }
# - 
# - export -f join_array
# - 
# - ######################################################################################
# - # I don't remember where I found this. This allows for arbitrary sized arrays
# - # and delimiters.
# - 
# - ## Example:
# - ##   join_array <delimiter> "${ARRAY[@]}"
# - ##   joined=$(join_array <delimiter> "${ARRAY[@]}"
# - 
# - #function join_array() {
# - #  local delim=$1
# - #  shift
# - #  printf '%s' "$1"
# - #  shift
# - #  printf '%s' "${@/#/$delim}"
# - #}
# - 
# - # SOMEARRAY=('one' 'two' 'three')
# - # SOMEVAR=$(join_array : 'SOMEARRAY')     => one:two:three
# - # SOMEVAR=$(join_array ' : ' 'SOMEARRAY') => one : two : three
# - 
# - function join_array() {
# -   local delim=$1
# -   shift
# - 
# -   [[ $1 == '__array__' ]] && {
# -     echo "Don't use var name __array__ for your array, that's what join_array is using." >&2
# -     return 1
# -   }
# - 
# -   local -a __array__
# -   eval "__array__=(\"\${$1[@]}\")"
# - 
# -   first="${__array__[0]}"
# -   rest=("${__array__[@]:1}")
# - 
# -   printf '%s' "$first"
# -   printf '%s' "${rest[@]/#/$delim}"
# - }
# - 
# - export -f join_array
# - 
# - # if __is_array_empty "${ARRAY[@]}"; then do stuff for empty array; fi
# - function __is_array_empty() {
# -   [[ ${#@} -ne 0 ]] && return 1
# -   return 0
# - }
# - 
# - export -f __is_array_empty
# - 
# - # See http://www.fvue.nl/wiki/Bash:_Check_if_array_element_exists
