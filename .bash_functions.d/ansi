# Peruse /usr/share/doc/xterm/*

# https://github.com/fidian/ansi has some good ideas, and some interesting
# things to try, but I don't like the way they're doing things. So I'll keep
# my own stuff for now.

# http://wiki.bash-hackers.org/scripting/terminalcodes

# Build an ansi code sequence string for use in a prompt.
# Expects one or more strings indicating what attributes and colors to use.
# It's up to the caller to make sure the right order and valid keys are used.

#TPUT=$(command -f tput)

if ! declare -A ansi_code > /dev/null 2>&1; then

  function __ansi_code() {

    declare -a codes

    while [ "${1+defined}" ]; do

      case $1 in

                 'bold') codes[${#codes[*]}]=$(tput bold) ;;
                  'dim') codes[${#codes[*]}]=$(tput dim) ;;
                  'off') codes[${#codes[*]}]=$(tput sgr0) ;;
         'underline_on') codes[${#codes[*]}]=$(tput smul) ;;
        'underline_off') codes[${#codes[*]}]=$(tput rmul) ;;
              'reverse') codes[${#codes[*]}]=$(tput rev) ;;
            'stdout_on') codes[${#codes[*]}]=$(tput smso) ;;
           'stdout_off') codes[${#codes[*]}]=$(tput rmso) ;;
             'black_fg') codes[${#codes[*]}]=$(tput setaf 0) ;;
               'red_fg') codes[${#codes[*]}]=$(tput setaf 1) ;;
             'green_fg') codes[${#codes[*]}]=$(tput setaf 2) ;;
            'yellow_fg') codes[${#codes[*]}]=$(tput setaf 3) ;;
              'blue_fg') codes[${#codes[*]}]=$(tput setaf 4) ;;
            'purple_fg') codes[${#codes[*]}]=$(tput setaf 5) ;;
              'cyan_fg') codes[${#codes[*]}]=$(tput setaf 6) ;;
             'white_fg') codes[${#codes[*]}]=$(tput setaf 7) ;;
             'black_bg') codes[${#codes[*]}]=$(tput setab 0) ;;
               'red_bg') codes[${#codes[*]}]=$(tput setab 1) ;;
             'green_bg') codes[${#codes[*]}]=$(tput setab 2) ;;
            'yellow_bg') codes[${#codes[*]}]=$(tput setab 3) ;;
              'blue_bg') codes[${#codes[*]}]=$(tput setab 4) ;;
            'purple_bg') codes[${#codes[*]}]=$(tput setab 5) ;;
              'cyan_bg') codes[${#codes[*]}]=$(tput setab 6) ;;
             'white_bg') codes[${#codes[*]}]=$(tput setab 7) ;;

      esac

      shift

    done

    local code

    SAVE_IFS=$IFS
    IFS=''
    code="${codes[*]}"
    IFS=$SAVE_IFS

    printf '\[%s\]' $code

  }

else

  ansi_code[bold]=$(tput bold)
  ansi_code[dim]=$(tput dim)
  ansi_code[off]=$(tput sgr0)
  ansi_code[underline_on]=$(tput smul)
  ansi_code[underline_off]=$(tput rmul)
  ansi_code[reverse]=$(tput rev)
  ansi_code[stdout_on]=$(tput smso)
  ansi_code[stdout_off]=$(tput rmso)

  # 0 = black
  # 1 = red
  # 2 = green
  # 3 = yellow
  # 4 = blue
  # 5 = purple
  # 6 = cyan
  # 7 = white

  ansi_code[black_fg]=$(tput setaf 0)
  ansi_code[red_fg]=$(tput setaf 1)
  ansi_code[green_fg]=$(tput setaf 2)
  ansi_code[yellow_fg]=$(tput setaf 3)
  ansi_code[blue_fg]=$(tput setaf 4)
  ansi_code[purple_fg]=$(tput setaf 5)
  ansi_code[cyan_fg]=$(tput setaf 6)
  ansi_code[white_fg]=$(tput setaf 7)

  ansi_code[black_bg]=$(tput setab 0)
  ansi_code[red_bg]=$(tput setab 1)
  ansi_code[green_bg]=$(tput setab 2)
  ansi_code[yellow_bg]=$(tput setab 3)
  ansi_code[blue_bg]=$(tput setab 4)
  ansi_code[purple_bg]=$(tput setab 5)
  ansi_code[cyan_bg]=$(tput setab 6)
  ansi_code[white_bg]=$(tput setab 7)

  function __ansi_code() {

    declare -a codes

    while [ "${1+defined}" ]; do

      if [ -n ${ansi_code[$1]} ]; then

        codes[${#codes[*]}]="${ansi_code[$1]}"

      fi

      shift

    done

    local code

    SAVE_IFS=$IFS
    IFS=''
    code="${codes[*]}"
    IFS=$SAVE_IFS

    printf '\[%s\]' $code

  }

fi

# Create some commonly used codes
text_reset=$(__ansi_code off)

text_green=$(__ansi_code green_fg)
text_red=$(__ansi_code red_fg)
text_yellow=$(__ansi_code yellow_fg)
text_cyan=$(__ansi_code cyan_fg)

# http://mywiki.wooledge.org/BashFAQ/037

colors256() {
  local c i j

  printf "Standard 16 colors\n"
  for ((c = 0; c < 17; c++)); do
    printf "|%s%3d%s" "$(tput setaf "$c")" "$c" "$(tput sgr0)"
  done
  printf "|\n\n"

  printf "Colors 16 to 231 for 256 colors\n"
  for ((c = 16, i = j = 0; c < 232; c++, i++)); do
    printf "|"
    ((i > 5 && (i = 0, ++j))) && printf " |"
    ((j > 5 && (j = 0, 1)))   && printf "\b \n|"
    printf "%s%3d%s" "$(tput setaf "$c")" "$c" "$(tput sgr0)"
  done
  printf "|\n\n"

  printf "Greyscale 232 to 255 for 256 colors\n"
  for ((; c < 256; c++)); do
    printf "|%s%3d%s" "$(tput setaf "$c")" "$c" "$(tput sgr0)"
  done
  printf "|\n"
}
