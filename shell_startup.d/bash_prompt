#!/bin/bash

# Ideas ripped off and made to fit from:
#   http://wiki.archlinux.org/index.php/Color_Bash_Prompt
#   http://www.termsys.demon.co.uk/vtansi.htm
#   https://gist.github.com/621452
#   https://gist.github.com/623142

#----------------------------------------------------------------------------
# Only setup the prompt if we are in an interactive session

[[ $- == *i* ]] || {
  debug "Not in interactive mode."
  return 0
}

#----------------------------------------------------------------------------
# 
export prompt_color color_off

prompt_color="$(ansi -n fg cyan)"
color_off="$(ansi -n off)"

#----------------------------------------------------------------------------
function join_array() {
  (($# != 2)) && die "must pass delimiter and array name"

  local delim="$1"
  local -n _array_="$2"

  #eval "_array_=(\"\${$2[@]}\")"

  first="${_array_[0]}"
  rest=("${_array_[@]:1}")

  printf '%s' "$first"
  printf '%s' "${rest[@]/#/$delim}"
}

#----------------------------------------------------------------------------
# The _parent function is called once during the .bash_prompt startup to
# determine the parent processes for the current shell session. The result is
# stored in the 'parent_output' variable and used in every prompt update. This
# implementation is based on the understanding that the pstree value doesn't
# change during a single shell session.
#
# XXX: This assumption is currently being tested for correctness.

function _parent() {

  command -v pstree &> /dev/null || return 0

  local parents

  parents=$(pstree -A $PPID 2> /dev/null) || return 1 

  parents=${parents/%-+*/}
  parents=${parents//---bash/}
  parents=${parents//gnome-terminal-/}
  parents=${parents//login/}
  parents=${parents//---pstree/}
  parents=${parents//: server/}
  parents=${parents//sshd/}
  parents=${parents//su/}
  parents=${parents//tmux/}

  [[ -n $parents ]] \
    && printf '\[%s\](%s)\[%s\] ' \
      "$(ansi -n fg bright_yellow bg red)" "$parents" "$(ansi -n off)"
}

parent=$(_parent)

#----------------------------------------------------------------------------
function _exit_status() {
  local -a status

  local color_bad color_good

  color_bad="$(ansi -n bg red fg white)"
  color_good="$(ansi -n bg blue fg yellow)"

  for s in "$@"; do

    # Wrap the exit symbols in appropriate ansi codes.

    # If a command is still writing to the pipe and a later command exits, the
    # first command will exit with a status of 141.  This causes confusion
    # with commands like echo or head.

    # Doing this *will* cause confusion if something does exit abnormally but
    # doesn't throw an appropriate exit status.

    case "$s" in
      0 | 141) status+="$color_good $s $color_off" ;;
      *) status+="$color_bad $s $color_off" ;;
    esac
  done

  statuscodes=$(join_array ' | ' 'status')

  printf '%s' "$statuscodes"
}

#----------------------------------------------------------------------------
# Append the last command, clear the history cache and reread the history file
_history() {
  history -a
  history -c
  history -r
}

#----------------------------------------------------------------------------
_update_prompt() {
  # don't use 'local exit_status' here because it wipes out PIPESTATUS.
  exit_status=$(_exit_status "${PIPESTATUS[@]}")

  local user_color hostname_color finalchr

  if [[ $UID -eq 0 ]]; then
    user_color="$(ansi -n fg bright_red)"
    finalchr='!!'

  else
    user_color="$(ansi -n fg bright_cyan)"
    finalchr='\$'
  fi

  hostname_color="$(ansi -n fg yellow)"
  # Build the prompt.
  local prompt_color system_reboot pacman_status finalchr

  [[ -x "$(command -v system-needs-reboot)" ]] \
    && system_reboot="$(system-needs-reboot)"

  [[ -x "$(command -v pacman-status)" ]] \
    && pacman_status="$(pacman-status)"

  PS1="${color_off}$(_history)\n${prompt_color}"

  # We're assumign dir-readable and git-status are on the system; we want to
  # be notified in a glaring way if they're not.
  [[ -n $system_reboot ]] && PS1+="${system_reboot}\n"
  [[ -n $pacman_status ]] && PS1+="${pacman_status}\n"
  PS1+="${parent}${user_color}\u@${hostname_color}\H: $(dir-readable)${color_off}$(git-status)\n"
  PS1+="${exit_status} ${finalchr} "

  unset exit_status
}

[[ -n $PS1 ]] && PROMPT_COMMAND='_update_prompt'
