#!/bin/bash

# !!!: Some resources are still calling scripts from sh, don't use dot in names.

# XXX: The majority of these functions need to be moved off to their own
#      libraries and loaded only when called.

# Don't let 'set -x' run when sourcing this script. You'll get a crap ton of junk.
#setx=$(set -o | grep xtrace | tr -s '[[:space:]]' ' ' | cut -d ' ' -f 2 ' ')
#[[ $setx -eq 'on' ]] && set +x
set +x

# XXX: Figure out a way to detect if 'set -x' is in play and turn it back on
#      at the end of this file.

# XXX: Convert is_* to is.*

# XXX: try/catch?
# XXX: exceptions? some kind of error-handling
# XXX: import option so only 'source utility func1 func2 ...' is ever needed
# XXX: logging (more than debug?)
# XXX: locking
# XXX: queue handling
# XXX: parallel processes
# XXX: ipc
# XXX: parameter handling
# XXX: trap handling
# XXX: signal handling

# Maybe steal some ideas from:
# https://github.com/niieani/bash-oo-framework

#----------------------------------------------------------------------------
source "$GLOBAL_LIB/debug"

#----------------------------------------------------------------------------
# Documentation

: << POD
=head1 NAME

utility - utilities used in libraries

=head1 SYNOPSIS

  source utility

=head1 OPTIONS

There are no options for this file

=head1 DESCRIPTION

This file contains various utility functions that are used in library files,
and can be used in any bash based script.

=head1 NOTES

This file will run various checks, detailed below.

=head2 Enviroment Check

If this file is not being called in a bash environment, or as a bash script,
it will exit with an error message.

=head2 Check If Sourced

If this file is not sourced, e.g. C<source utility>, this file will exit with
an error message.

If this file is called with C<-?>, C<-h> or C<--help> a usage message will be
shown instead of an error message.

NOTE: the checking for a help switch has been disabled.

=head2 Check For User Setup

If the C<USER> environment variable and the output of C<id -un> do not match,
then an attempt will be made to set the environment up correctly, changing the
environment variables C<USER>, C<HOME>, and C<TERM> appropriately and
attempting to load the correct C<.bash_profile>.

This is needed mainly for datastage scripts. No one else should be affected.

=head1 FUNCTIONS

=cut
POD

#----------------------------------------------------------------------------
: << POD
=head2 warn

Usage: warn "message"

C<warn> will print whatever is sent to it to STDERR.

Equivalent to C<echo 'Message' E<gt>&2>

=cut
POD

function warn() { printf '%s\n' "$*" >&2; }

#----------------------------------------------------------------------------
: << POD
=head2 die

Usage: die "message"
       die 2 "message"
       someprog || die "message"

C<die> will call C<warn> with "message" and then C<exit 1>.

C<die> returns the most recent return code unless you provide a status code as
the second parameter.

=cut
POD

function die() {
  # Grab most recent return code
  local rc=$?

  if is_integer "$1"; then
    rc=$1
    shift
  fi

  (($#)) && warn "$*"

  [[ $rc -eq 0 ]] && rc=1

  exit "${rc:-1}"
}

#----------------------------------------------------------------------------
: << POD
=head2 verbose

Usage: verbose "message"

C<verbose> will check if the environment variable C<VERBOSE> is true, and if not,
silently return with a 0 return code.

Otherwise, C<verbose> will C<warn> the message passed in.

Example:

  verbose 'message to display if VERBOSE=1'

=cut
POD

verbose() { ((VERBOSE)) && warn "$*"; }

#----------------------------------------------------------------------------
: << POD
=head2 show_usage

usage: show_usage
       show_usage 'message'

C<show_usage> will display the contents of the I<SYNOPSIS> and I<OPTIONS>
sections of the documentation in your script. If you pass in an optional
message, it will be display at the beginning of the help screen.

B<NOTE>: Do not create a function called C<usage> in your script. You will
cause and infinite loop but nothing will show. You will tear your hair out
trying to debug it.
=cut
POD

function show_usage() {
  debug "Entered ${FUNCNAME[0]} ..."
  debug "Parms ($#): $*"

  #  ((DEBUG)) && {
  #    for ((ix = 0; ix < ${#BASH_SOURCE[@]}; ix++)); do
  #      debug "BASH_SOURCE[$ix]: ${BASH_SOURCE[ix]}"
  #    done
  #  }

  local -a usage_opts
  usage_opts=('-verbose' 1)

  [[ -n $1 ]] && usage_opts+=('-msg' "$*")

  debug "usage ${usage_opts[*]} ${BASH_SOURCE[1]}"

  # usage is a perl script located in tools/bin that is modified from the
  # pod2usage script.

  usage_file=${BASH_SOURCE[2]}
  [[ -z $usage_file ]] && usage_file=${BASH_SOURCE[1]}

  usage_file_basename="$(basename "$usage_file")"
  no_usage=0

  # shellcheck disable=SC2086,SC2128
  usage "${usage_opts[@]}" "$usage_file" || {
    # XXX: #1 show_usage is incorrectly report missing usage documentation
    warn "$usage_file_basename does not have usage documentation"
    ((no_usage++))
  }

  #  if man -w "$usage_file_basename" &> /dev/null; then
  #    warn "Please see man page for more details."
  #    warn "Try: man $usage_file_basename"
  #  else
  #    warn "$usage_file_basename does not have a man page."
  #    ((no_usage++))
  #  fi

  #  ((no_usage)) && warn "Bug the author of $usage_file_basename to write documentation."

  debug "... exiting subprocess via ${FUNCNAME[0]}."
  exit 1
}

#----------------------------------------------------------------------------
: << POD
=head2 is_integer

Usage: if [[ is_integer 32 ]]; then echo "Is a number!"; fi

C<is_integer> does a simple check if the value is a number and returns 0 if it
is, 1 otherwise.

=cut
POD

function is_integer() {
  [[ $1 != *[!0-9]* ]] && return 0
  return 1
}

#----------------------------------------------------------------------------
: << POD
=head2 is_alpha

Usage: if [[ is_alpha 32 ]]; then echo "Is alphanumeric!"; fi

C<is_alpha> does a simple check if the value is an alphanumeric and returns
0 if it is, 1 otherwise.

=cut
POD

function is_alpha() {
  [[ $1 != *[!0-9a-zA-Z]* ]] && return 0
  return 1
}

#----------------------------------------------------------------------------
: << POD
=head2 is_char

Usage: if [[ is_char 'a' ]]; then echo "Is a char!"; fi

C<is_char> does a simple check if the value is a single character and returns
0 if it is, 1 otherwise.

=cut
POD

function is_char() {
  [[ ${#1} -eq 1 ]] && return 0
  return 1
}

#----------------------------------------------------------------------------
: << POD
=head2 is_date

Usage:
  if [[ is_date 20180702 ]]; then echo "valid date"; fi
  new_date=E<36>(is_date '20180702' '%A') || die "Invalid date"

C<is_date> determines if a date is valid and optionally returns the date in
the specified format.

The second parameter is expected to be a valid C<date> format, minus the plus
(+) sign. If the second parameter is not a valid format this function will
return 1, as invalid.

NOTE: This function makes a good faith effort, but there are too many ways in
which a date can be formatted.

=cut
POD

function is_date() {
  [[ -z $1 ]] && return 1

  if [[ -n $2 ]]; then
    date -d "$1" "+$2" 2> /dev/null && return 0
  else
    date -d "$1" &> /dev/null && return 0
  fi

  return 1
}

#----------------------------------------------------------------------------
: << POD
=head2 is_dirempty

Usage: if [[ is_dirempty "E<36>dir" ]]; then echo "E<36>dir is empty"; fi

C<is_dirempty> detects if a directory and, if it is, returns 0, otherwise 1.

=cut
POD

function is_dirempty() {
  [[ -n "$(find "$1" -maxdepth 0 -empty -print)" ]] && return 0
  return 1
}

#----------------------------------------------------------------------------
: << POD
=head2 is_varname

Usage: is_varname "E<36>variable"

Determines whether the string in C<E<36>variable> is a valid variable name.
Returns 0 if it is, 1 if it isn't.

=cut
POD

function is_varname() {
  # If varname is a single character then it can't be an underscore '_'.
  [[ $1 == [A-Za-z] ]] && return 0
  [[ $1 == [A-Za-z_][A-Za-z0-9_]* ]] && return 0
  return 1
}

#----------------------------------------------------------------------------
: << POD
=head2 verify_filename

Usage: filename=E<36>(verify_filename "E<36>filename") || die "bad filename"

Checks if the value is a valid filename and if it exists is it readable, or if
it does not exist can we create it. If it is readable or creatable, returns 0.
Otherwise returns 1.

This function expects a path to a filename, relative or absolute, and will
print a fully canonicalized path to the filename.

This function expects the path to the filename to exist and will return an
error if it does not.

=cut
POD

function verify_filename() {
  local filename="$1"

  fqdn="$(readlink -f "$(dirname "$filename")")" || {
    warn "Unable to canonicalize directory for filename:
$(namei -lx "$filename")"
    return 1
  }

  filename="$fqdn/$(basename "$filename")"
  debug "fqfn: $filename"

  if [[ -f $filename ]]; then
    debug "$filename exists ..."

    [[ -r $filename ]] || {
      warn "filename exists but is not readable:
$(namei "$filename")"
      return 1
    }

    debug "... and is readable"

  elif [[ -e $filename ]]; then
    warn "$filename exists but is not a file"
    return 1

  else
    debug "$filename does not exist ..."

    truncate --size 0 "$filename" || {
      warn "$filename does not exist and cannot create it:
$(namei "$filename")"
      return 1
    }

    debug "... and is writable"

    rm "$filename" || die "Unable to remove test file ($filename), exiting."
  fi

  printf '%s' "$filename"
  return 0
}

#----------------------------------------------------------------------------
: << POD
=head2 anykey

Usage: anykey ['prompt']

C<anykey> will prompt and wait for a single keypress.

C<anykey> accepts an optional value that will be used as the prompt. If
nothing is passed in, the default prompt is 'Press any key to continue ...'

=cut
POD

function anykey() { read -n 1 -r -s -p "${1:-Press any key to continue ...}"; }

#-----------------------------------------------------------------------------
: << POD
=head2 yesno

Usage: answer=E<36>(yesno ['prompt'])

C<yesno> will prompt and wait for either a 'Y' or an 'N' as input. Anything
else will be ignored, the user will be warned and prompted again. The input is
case-insensitive.

C<yesno> accepts an optional value that will be used as the prompt. If nothing
is passed in, the default prompt is 'Yes or no?'.

=cut
POD

# shellcheck disable=SC2120
function yesno() {
  local -u yn

  while true; do
    # shellcheck disable=SC2162
    read -N1 -p "${1:-Yes or no?} " yn

    case $yn in
      Y | N)
        printf '%s' "$yn"
        return
        ;;
      Q)
        warn 'Exiting...'
        exit 1
        ;;
      *)
        warn 'Please enter a Y or a N'
        ;;
    esac
  done
}

#-----------------------------------------------------------------------------
: << POD
=head2 fill_template

Usage: newstring=E<36>(fill_template C<string to be processed>)

C<fill_template> will parse the string passed in and replace %WORD% with the
value of the environment variable WORD.

E.g., if environment variable C<PRJHOME> was equal to C</nas_pp/test/cap>,
then the string I<Your home directory is %PRJHOME%.> would be returned as
I<Your home directory is /nas_pp/test/cap.>

If you set DELIM to a single character, that character will be used as
a delimiter instead of '%'.

=cut
POD

# From bash manpage:

# An additional binary operator, =~, is available, with the same precedence as
# == and !=. When it is used, the string to the right of the operator is
# considered an extended regular expression and matched accordingly (as in
# regex(3)). The return value is 0 if the string matches the pattern, and
# 1 otherwise. If the regular expression is syntactically incorrect, the
# conditional expression's return value is 2. If the shell option nocasematch
# is enabled, the match is performed without regard to the case of alphabetic
# characters. Any part of the pattern may be quoted to force the quoted
# portion to be matched as a string. Bracket expressions in regular
# expressions must be treated carefully, since normal quoting characters lose
# their meanings between brackets. If the pattern is stored in a shell
# variable, quoting the variable expansion forces the entire pattern to be
# matched as a string. Substrings matched by parenthesized subexpressions
# within the regular expression are saved in the array variable BASH_REMATCH.
# The element of BASH_REMATCH with index 0 is the portion of the string
# matching the entire regular expression. The element of BASH_REMATCH with
# index n is the portion of the string matching the nth paren‐ thesized
# subexpression.

# XXX: Figure out a way to allow a delimiter to be escaped. E.g., \% should
# not be counted as the start or end of a variable name.

# XXX: Change variables to FT_* (or some other prefix) to avoid possible name
# collisions.

function fill_template() {
  debug "Entered ${FUNCNAME[0]} ..."

  [[ -z $1 ]] && Usage "${FUNCNAME[0]} requires a string to process."
  s="$*"

  local DELIM="${DELIM:-%}"
  local regex="$DELIM([^$DELIM]*)$DELIM"
  local rc=0

  [[ $s =~ $regex ]] || {
    rc=$?
    ((rc > 2)) && warn "Unknown error from =~ in fill_template."
    ((rc == 2)) && warn "Syntax error in fill_template's regex."

    ((rc == 1)) && {
      warn "No %variable%'s found in string '%s'."
      printf '%s' "$s"
    }

    return $rc
  }

  while [[ $s =~ $regex ]]; do

    # If the variable does not exist in the environment, then warn, otherwise
    # replace with nothing.

    local value

    if [[ -v ${BASH_REMATCH[1]} ]]; then
      value="${!BASH_REMATCH[1]}"

    else
      warn "Variable '${BASH_REMATCH[1]}' does not exist in the environment"
      value="!!${BASH_REMATCH[1]}!!"

    fi

    s=${s//${BASH_REMATCH[0]}/$value}
  done

  debug "rc: $rc"
  ((rc > 0)) && return $rc

  debug "Leaving ${FUNCNAME[0]} ..."
  printf '%s' "$s"
}

#----------------------------------------------------------------------------
# Join an array with specified separator

: << POD
=head2 join_array

Usage:

=over

=item  somearray=('one' 'two' 'three')

=item  somevar=E<36>(join_array : 'somearray')     # one:two:three

=item  somevar=E<36>(join_array ' : ' 'somearray') # one : two : three

=back

C<join_array> will join the contents of the specified array with the
specified separator.

=head3 NOTE

If you want to join E<36>@, you will need to copy it to an array, and
then pass that array name to C<join_array>.

=cut
POD

# XXX:Maybe modify to allow for   join_array ':' "$@"  ?
#     A check for if $# > 2 then assume array value has been passed in,
#     otherwise assume array name has been passed in.
#     But, if array has one element this will cause (possibly weird) errors.
#     Could check and see if array name exists as an array ...

function join_array() {
  (($# != 2)) && die "must pass delimiter and array name"

  local delim=$1
  local -a _array_

  eval "_array_=(\"\${$2[@]}\")"

  first="${_array_[0]}"
  rest=("${_array_[@]:1}")

  printf '%s' "$first"
  printf '%s' "${rest[@]/#/$delim}"
}

#----------------------------------------------------------------------------
# Create a simple lock

# XXX: Document me!
# XXX: This depends on trap not being overwritten later on...

simplelock() {
  local lockdir=${1?-must pass name to use as lock}

  mkdir -m 0000 "$lockdir" &> /dev/null || return 1

  # shellcheck disable=SC2064
  trap "[[ -d $lockdir ]] && { chmod 0700 $lockdir; rmdir $lockdir; }; exit" ERR EXIT

  return 0
}

#----------------------------------------------------------------------------
# Load libraries on demand

: << POD
=head1 EXTERNAL LIBRARIES

These are convenience functions that will source the relevant libraries and
call the requested function.

If you've already sourced utility, then you don't need to remember if you need
to source or just use a library.

=cut
POD

function _load_library() {
  [[ -z $1 ]] && die "_load_library is expecting a library name"

  local libname=$1
  shift

  debug "Sourcing $libname library ..."
  source "$libname" || die "_load_library failed"
  debug "Calling $libname function with original parameters ..."
  $libname "$@"
}

: << POD
=head2 GetAuth

Sources the GetAuth library and calls it.

Read the GetAuth manpage--C<man GetAuth>--for details.

=cut
# Load libraries on demand

: << POD
=head1 EXTERNAL LIBRARIES

These are convenience functions that will source the relevant libraries and
call the requested function.

If you've already sourced utility, then you don't need to remember if you need
to source or just use a library.

=cut
POD

function _load_library() {
  [[ -z $1 ]] && die "_load_library is expecting a library name"

  local libname=$1
  shift

  debug "Sourcing $libname library ..."
  source "$libname" || die "_load_library failed"
  debug "Calling $libname function with original parameters ..."
  $libname "$@"
}

: << POD
=head2 GetAuth

Sources the GetAuth library and calls it.

Read the GetAuth manpage--C<man GetAuth>--for details.

=cut
POD

function GetAuth() { _load_library "${FUNCNAME[0]}" "$@"; }

: << POD
=head2 parse_params

Sources the ParseParams library and calls the parse_params function.

Read the ParseParams manpage--C<man ParseParams>--for details.

=cut
POD

# XXX: Maybe?

#      function parse_params() { _load_library 'ParseParams' "${FUNCNAME[0]}" "$@"; }

#      Would required _load_library expect two params first, causing GetAuth
#      to look like:

#      function GetAuth() { _load_library "${FUNCNAME[0]}" "${FUNCNAME[0]}" "$@"; }

#      or, perhaps making _load_library duplicate them if one is empty, making
#      the following identical:

#      function GetAuth() { _load_library '' "${FUNCNAME[0]}" "$@"; }
#      function GetAuth() { _load_library "${FUNCNAME[0]}" '' "$@"; }

function parse_params() {
  debug "Sourcing ParseParams library ..."
  source ParseParams || die "ParseParams failed"
  debug "Calling real function with original parameters ..."
  parse_params "$@"
}

#----------------------------------------------------------------------------
# Do we need to show usage and are we being sourced?

# This broke parameters that have a legitimate use, such as some-parm-with-h-in-it.
#[[ -z $PARMS_CHECKED ]] && {
#  PARMS_CHECKED=1
#  [[ $* == *-[\?h]* ]] && show_usage ''
#}

# I ran into an edge case with the '$(return &> /dev/null)' check.  See
# https://stackoverflow.com/questions/51526628/checking-if-current-file-is-being-sourced-using-return-yields-reversed-result-af
# for a discussion on the problem.

# Using '$(return 0 &> /dev/null)' solves this problem, but the following is
# a more idiomatic way to do this.

#[[ ${BASH_SOURCE[0]} == "$0" ]] && die "$(basename "$0") must only be sourced."

sourced || die 'utility must only be sourced'

#----------------------------------------------------------------------------
# In some cases, specifically scripts called by datastage, the environment is
# not setup quite right. Try to fix this.

EXPECTED_USER=$(id -un)

if [[ $USER != "$EXPECTED_USER" ]]; then
  [[ -z $TERM ]] && export TERM='xterm'
  export USER="$EXPECTED_USER"
  HOME=$(grep "$USER" /etc/passwd | cut -d ':' -f 6)
  export HOME
  # shellcheck disable=SC1090
  source "$HOME/.bash_profile"
fi

#[[ $setx -eq 'on' ]] && set -x

# XXX: Integrate this:

# usage:
#   somecmd | someothercmd
#   pipe_err && do something if either 'somecmd' or 'someothercmd' failed.

# function pipe_err() {
#   local -i pipe_status=0

#   for status in "${PIPESTATUS[@]}"; do
#     [[ $status -gt 0 ]] && ((pipe_status++))
#   done

#   ((pipe_status > 0))
# }
