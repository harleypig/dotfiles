# Some ideas came from these places ...
#
# http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples
# https://git.wiki.kernel.org/index.php/Aliases
# https://news.ycombinator.com/item?id=14045787
# http://www.jukie.net/bart/blog/pimping-out-git-log
# https://gist.github.com/felipesabino/6391408

# Check these pages out for more ideas ...
#
# http://gggritso.com/human-git-aliases
# https://stackoverflow.com/questions/3321492/git-alias-with-positional-parameters

##################################################################################

[user]
  # Until we have matching users for each of the environments (capdev, dwdev,
  # etc.), and since all commits are going under my name anyway, we'll just
  # leave this as the default for now.

  name = ETL Admin
  email = DL-EIMETLAdministration@zionsbancorp.com

[core]
  autocrlf     = input
  compression  = 9
  editor       = vim
  excludesfile = ~/.gitignore_global
  pager        = less -FIJRWX
  safecrlf     = false
  filemode     = true
  askpass      =

[apply]
  ignorewhitespace = change
  whitespace       = fix

# 'git help config', search for 'list of colors'
# Colors: <FG> [<BG>] [<ATTR>]
#  FG/BG: normal, black, red, green, yellow, blue, magenta, cyan and white
#   ATTR: bold, dim, ul, blink and reverse

[color]
  branch      = auto
  diff        = auto
  grep        = auto
  interactive = auto
  showbranch  = true
  status      = auto

[github]
  user = harleypig

[transfer]
  fsckobjects = true

##################################################################################

[alias]
  # Show the defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  a    = add
  aa   = add --all
  ai   = add --interactive
  au   = add -u

  unadd = reset --
  unstage = reset --

  b    = branch
  ba   = branch -a
  ball = branch -ar

  c    = commit
  cb   = commit --branch
  ci   = commit --interactive
  co   = checkout

  conflicted = "diff --name-only --diff-filter=U"

  d    = diff --color --color-words --abbrev
  dc   = diff --color --color-words --abbrev --cached
  dd   = diff --color --color-words --abbrev --dirstat
  ds   = diff --color --color-words --abbrev --stat
  dt   = difftool

  f    = fetch
  fa   = fetch --all
  fp   = fetch --prune

  find = !git ls-tree -r --name-only HEAD | grep --color $1
  ignore = !git status &> /dev/null && \
            echo $1 >> $(git rev-parse --show-toplevel)/.gitignore

  m    = merge

  p    = pull

  prune-all = "!git remote | xargs -n 1 git remote prune"

  s    = status
  ss   = status -s
  st   = status -sb

  untrack = rm --cache --

  assumed     = "!git ls-files -v | grep ^h | cut -c 3-"
  assume      = update-index --assume-unchanged
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  unassume    = update-index --no-assume-unchanged
  #wip         = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m 'wip'"

  # Visualize the log
  #graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

  # List changes for each commit
  lc   = log ORIG_HEAD.. --stat --no-merges

  # List new files for the incoming merge
  new      = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  changes  = diff --name-status -r
  diffstat = diff --stat -r

  l    = log --graph --abbrev-commit --date=iso --pretty=format:'%Cred%h %C(blue)%cd %C(bold magenta)|%Creset %s%C(yellow)%d %Cgreen(%cn) %Cblue%cr'

  lp   = log --graph --topo-order --pretty=format:'%h : (%aN) %s'
  logm = log --merges --decorate --date=short --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
  logn = log --decorate --numstat --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"

##################################################################################

[branch]
  autosetupmerge = true

[color "branch"]
#  FG/BG: normal, black, red, green, yellow, blue, magenta, cyan and white
#   ATTR: bold, dim, ul, blink and reverse

  current  = green reverse
  local    = cyan
  plain    = white
  remote   = blue
  upstream = blue reverse

[diff]
  algorithm = minimal
  guitool   = gvimdiff
  renames   = copies
  tool      = vimdiff

[difftool]
  prompt = false

[color "diff"]
#  FG/BG: normal, black, red, green, yellow, blue, magenta, cyan and white
#   ATTR: bold, dim, ul, blink and reverse

  commit     = white black reverse
  context    = white dim
  frag       = magenta bold
  func       = yellow black bold
  meta       = green
  new        = green bold
  old        = red
  whitespace = red dim

[fetch]
  prune = true

#[color "grep"]
  # non-matching text in context lines (when using -A, -B, or -C)
  # context =

  # filename prefix (when not using -h)
  # filename =

  # function name lines (when using -p)
  # function =

  # line number prefix (when using -n)
  # linenumber =

  # matching text (same as setting matchContext and matchSelected)
  # match =

  # matching text in context lines
  # matchContext =

  # matching text in selected lines
  # matchSelected =

  # non-matching text in selected lines
  # selected =

  # separators between fields on a line (:, -, and =) and between hunks (--)
  # separator =

#[color "interactive"]
# prompt, header, help or error

[merge]
	tool = fugitive
  guitool = kdiff3
  conflictstyle = diff3

[mergetool]
  prompt = false

[mergetool "fugitive"]
	cmd = vim -f -c \"Gvdiff\" \"$MERGED\"

[notes]
  displayRef = '*'

[pull]
  default = current

[push]
  default = current
  followTags = true

[stash]
  showpatch = true

[status]
  showuntrackedfiles = all

[color "status"]
  added     = green
  changed   = red
  untracked = yellow
  unmerged  = red dim

[rebase]
  autostash = true
  autosquash = true

[http]
  sslVerify = false

[http "https://dev.azure.com/"]
  sslVerify = false
  proxy = http://webproxy.cs.zionsbank.com:8080

[credential]
  helper = /bin/bash /nas_pp/etl/tools/bin/git-credential-helper

  # Don't use cache because it saves credentials in such a way the token is
  # accessible to anybody logged in to the same account.
  #
  #helper = cache
