#!/bin/bash

# Need to pull in the __git_ps1 function

[[ -f /etc/bash_completion ]]             && source /etc/bash_completion
[[ -f /etc/profile.d/bash-completion ]]   && source /etc/profile.d/bash-completion
[[ -d ~/.bash_completion.d ]]             && source ~/.bash_completion.d/*

function git_status {

# from /etc/bash_completion.d/git
#
#    3) Consider changing your PS1 to also show the current branch:
#        PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
#
#       The argument to __git_ps1 will be displayed only if you
#       are currently in a git repository.  The %s token will be
#       the name of the current branch.
#
#       In addition, if you set GIT_PS1_SHOWDIRTYSTATE to a nonempty
#       value, unstaged (*) and staged (+) changes will be shown next
#       to the branch name.  You can configure this per-repository
#       with the bash.showDirtyState variable, which defaults to true
#       once GIT_PS1_SHOWDIRTYSTATE is enabled.
#
#       You can also see if currently something is stashed, by setting
#       GIT_PS1_SHOWSTASHSTATE to a nonempty value. If something is stashed,
#       then a '$' will be shown next to the branch name.
#
#       If you would like to see if there're untracked files, then you can
#       set GIT_PS1_SHOWUNTRACKEDFILES to a nonempty value. If there're
#       untracked files, then a '%' will be shown next to the branch name.
#
#       If you would like to see the difference between HEAD and its
#       upstream, set GIT_PS1_SHOWUPSTREAM="auto".  A "<" indicates
#       you are behind, ">" indicates you are ahead, and "<>"
#       indicates you have diverged.  You can further control
#       behaviour by setting GIT_PS1_SHOWUPSTREAM to a space-separated
#       list of values:
#           verbose       show number of commits ahead/behind (+/-) upstream
#           legacy        don't use the '--count' option available in recent
#                         versions of git-rev-list
#           git           always compare HEAD to @{upstream}
#           svn           always compare HEAD to your SVN upstream
#       By default, __git_ps1 will compare HEAD to your SVN upstream
#       if it can find one, or @{upstream} otherwise.  Once you have
#       set GIT_PS1_SHOWUPSTREAM, you can override it on a
#       per-repository basis by setting the bash.showUpstream config
#       variable.

  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWSTASHSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWUPSTREAM="auto"

  info=$(__git_ps1 '%s')

  msg=

  if [ -n "${info}" ]; then

    branch=$(echo    "$info" | perl -ane '$F[0]=~s/[<>=]$//;print $F[0]')
    unstaged=$(echo  "$info" | perl -ane 'print $F[1]=~/\*/')
    staged=$(echo    "$info" | perl -ane 'print $F[1]=~/\+/')
    stashed=$(echo   "$info" | perl -ane 'print $F[1]=~/\$/')
    untracked=$(echo "$info" | perl -ane 'print $F[1]=~/\%/')
    behind=$(echo    "$info" | perl -ane 'print $F[1]=~/\</ || $F[0]=~/\<$/')
    ahead=$(echo     "$info" | perl -ane 'print $F[1]=~/\>/ || $F[0]=~/\>$/')

    UNSTAGED='       -'
    if [ -n "$unstaged" ]; then UNSTAGED='unstaged'; fi

    STAGED='     -'
    if [ -n "$staged" ]; then STAGED='staged'; fi

    BEHIND='   -'
    if [ -n "$behind" ]; then BEHIND='pull'; fi

    AHEAD='   -'
    if [ -n "$ahead" ]; then AHEAD='Push'; fi

    REPO=$(basename $(git rev-parse --show-toplevel))

    printf ' %20s ( %10s ): %8s %6s %4s %4s %s\n' ${REPO} ${branch} ${UNSTAGED} ${STAGED} ${BEHIND} ${AHEAD} ${PWD}

  fi
}

ROOTDIR=$PWD
GITDIRS=( $(find -type d -name '.git' -exec dirname {} \; | sort) )

for d in "${GITDIRS[@]}"
do

  cd ${d}

#  STATUS=$(git status -s)
#  [[ -n ${STATUS} ]] && echo ${d} needs attention

  git_status

  cd ${ROOTDIR}

done

