#!/bin/bash

# Aliases and functions for git

# Check the following for more ideas:

# https://gist.github.com/chrismccoy/8775224
# https://gitlab.com/mikegerwitz/git-shortmaps
# https://github.com/scmbreeze/scm_breeze

GIT=$(command -v git 2>/dev/null)

if [[ -n $GIT ]]; then
  debug "Found $GIT"

  function git_remove_missing_files() { git ls-files -d -z | xargs -0 git update-index --remove; }

  function gtoplevel() {
    git rev-parse --show-toplevel 2>/dev/null || {
      debug "Not in a git repository."
      return 1
    }

    return 0
  }

  # Go to current git repo toplevel directory.
  function gtl() {
    local dir
    dir="$(gtoplevel)" || return 1

    cd "$dir" || {
      debug "Unable to change to $dir"
      return 1
    }
  }

  # Go to current git toplevel directory, perform the git command and return
  # to the original directory.
  # XXX: Do any functions need this?
  function git_cmd_return() {
    gtl || return 1
    debug "changed to $PWD"
    debug "git $*"
    git "$@"
    # shellcheck disable=SC2164
    cd - >/dev/null
  }

  vim_bundles='.vim/bundle'

  function gsubadd() {
    gtl || return 1

    if (($# < 2)); then
      cat <<EOH
  Usage: gsubadd <repo> <submodule> <branch>

  This function will add the repository in $vim_bundles
  and set the various settings in .gitmodule for that submodule.

  Currently, those are:

  ignore = dirty

  If branch is not provided the default of 'master' will be used.

EOH

      return 1
    fi

    repo=$1
    name=$2
    name_dir="$vim_bundles/$name"
    branch=${3:-master}

    [[ -d $name_dir ]] || mkdir -p "$name"

    debug "git submodule add -b \"$branch\" \"$repo\" \"$name_dir\""
    git submodule add -b "$branch" "$repo" "$name_dir"

    debug "git config -f .gitmodules submodule.\"$name_dir\".ignore dirty"
    git config -f .gitmodules submodule."$name_dir".ignore dirty

    debug "git add .gitmodules"
    git add .gitmodules

    debug "git commit -m \"added $name submodule\""
    git commit -m "added $name submodule"

    # shellcheck disable=SC2164
    cd - >/dev/null
  }

  function gsubrm() {
    gtl || return 1

    [[ -z $1 ]] && {
      debug "Must pass a bundle to be removed"
      return 1
    }

    name=$1
    name_dir="$vim_bundles/$name"

    [[ -d $name_dir ]] || {
      debug "$name_dir does not exist"
      return 1
    }

    debug "git rm $name_dir"
    git rm "$name_dir"

    debug "rm -fr .git/modules/$vim_bundles/$name"
    rm -fr ".git/modules/$vim_bundles/$name"

    debug "git config -f .git/config --remove-section submodule.\"$name_dir\""
    git config -f .git/config --remove-section submodule."$name_dir" 2>/dev/null

    debug "git commit -m \"removed $name bundle\""
    git commit -m "removed $name bundle"

    # shellcheck disable=SC2164
    cd - >/dev/null
  }

  # Do any of these need git_cmd_return?
  function ga() { git add "$@"; }
  function gca() { git commit -a -v -m "$@"; }
  function gc() { git commit -v -m "$@"; }
  function gco() { git checkout "$@"; }
  function gf() { git fetch --all --tags; }
  function gmv() { git mv "$@"; }
  function grm() { git rm "$@"; }

  alias gall='git add .'
  alias gba='git branch -ra -v'
  alias gb='git branch'
  alias gcp='git cherry-pick'
  alias gd='git diff'
  alias gds='git diffstat'
  alias glg='git lg'
  alias gl='git pull'
  alias gpall='git push --all'
  alias gp='git push'
  alias gs='git status -s'

fi
