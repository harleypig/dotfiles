#!/bin/bash

# shellcheck disable=SC1117

# Peruse /usr/share/doc/xterm/*

# https://github.com/fidian/ansi has some good ideas, and some interesting
# things to try, but I don't like the way they're doing things. So I'll keep
# my own stuff for now.

# http://mywiki.wooledge.org/BashFAQ/037
# http://wiki.bash-hackers.org/scripting/terminalcodes

# Convert rgb (0-255 0-255 0-255) to 8-bit 0-255
# XXX: Figure out how to do hex

# CF=6/256
# 8bit=$(( 16 + (($1 * $CF) * 36) + (($2 * $CF) * 6) + ($3 * $CF) ))

declare -xA ansi_code

function ansi() {
  # convert convenience values to what tput understands

  local -A color

  color[black]=0
  color[red]=1
  color[green]=2
  color[yellow]=3
  color[blue]=4
  color[purple]=5
  color[cyan]=6
  color[white]=7
  color[bright_black]=8
  color[bright_red]=9
  color[bright_green]=11
  color[bright_yellow]=11
  color[bright_blue]=12
  color[bright_purple]=13
  color[bright_cyan]=14
  color[bright_white]=15

  local seq

  while [ $# -ge 1 ]; do
    case $1 in
               bell) debug 'bell'          ; seq+=$(tput bel)  ;;
        italics_off) debug 'italics_off'   ; seq+=$(tput ritm) ;;
         italics_on) debug 'italics_on'    ; seq+=$(tput sitm) ;;
                off) debug 'off'           ; seq+=$(tput sgr0) ;;
            reverse) debug 'reverse'       ; seq+=$(tput rev)  ;;
         stdout_off) debug 'stdout_off'    ; seq+=$(tput rmso) ;;
          stdout_on) debug 'stdout_on'     ; seq+=$(tput smso) ;;
      underline_off) debug 'underline_off' ; seq+=$(tput rmul) ;;
       underline_on) debug 'underline_on'  ; seq+=$(tput smul) ;;

      fg)
        shift
        c=$1
        [[ -v color[$c] ]] && c=${color[$c]}
        debug "fg $c"
        seq+=$(tput setaf $c)
        ;;

      bg)
        shift
        c=$1
        [[ -v color[$c] ]] && c=${color[$c]}
        debug "bg $c"
        seq+=$(tput setab $c)
        ;;

      *) debug "*: $1" ; seq+=$(tput "$2") ;;
    esac

    shift
  done

  printf '%s' "$seq"
  return
}

# http://mywiki.wooledge.org/BashFAQ/037

function colors256() {
  local c i j

  printf 'Standard 16 colors\n'
  for ((c = 0; c < 17; c++)); do
    printf "|%s%3d%s" "$(ansi fg "$c")" "$c" "$(ansi off)"
  done
  printf '|\n\n'

  printf 'Colors 16 to 231 for 256 colors\n'
  for ((c = 16, i = j = 0; c < 232; c++, i++)); do
    printf '|'
    ((i > 5 && (i = 0, ++j))) && printf ' |'
    ((j > 5 && (j = 0, 1))) && printf '\b \n|'
    printf '%s%3d%s' "$(ansi fg "$c")" "$c" "$(ansi off)"
  done
  printf '|\n\n'

  printf 'Greyscale 232 to 255 for 256 colors\n'
  for (( ; c < 256; c++)); do
    printf '|%s%3d%s' "$(ansi fg "$c")" "$c" "$(ansi off)"
  done
  printf '|\n'
}

export -f colors256
