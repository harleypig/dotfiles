#!/bin/bash

# shellcheck disable=SC1117

# Peruse /usr/share/doc/xterm/*

# https://github.com/fidian/ansi has some good ideas, and some interesting
# things to try, but I don't like the way they're doing things. So I'll keep
# my own stuff for now.

# http://wiki.bash-hackers.org/scripting/terminalcodes

# Convert rgb (0-255 0-255 0-255) to 8-bit 0-255
# XXX: Figure out how to do hex

# CF=6/256
# 8bit=$(( 16 + (($1 * $CF) * 36) + (($2 * $CF) * 6) + ($3 * $CF) ))

declare -A ansi_color

ansi_color[black]=0
ansi_color[red]=1
ansi_color[green]=2
ansi_color[yellow]=3
ansi_color[blue]=4
ansi_color[purple]=5
ansi_color[cyan]=6
ansi_color[white]=7
ansi_color[bright_black]=8
ansi_color[bright_red]=9
ansi_color[bright_green]=10
ansi_color[bright_yellow]=11
ansi_color[bright_blue]=12
ansi_color[bright_purple]=13
ansi_color[bright_cyan]=14
ansi_color[bright_white]=15

export ansi_color

function ansi() {
  # convert convenience values to what tput understands
  local seq

  debug "parms: $*"

  while [ $# -ge 1 ]; do
    case $1 in # termcap version (see 'less' setup file)
               bell) seq+="$(tput bel)"  ;;
               bold) seq+="$(tput bold)" ;; # md
                dim) seq+="$(tput dim)"  ;; # mh
        italics_off) seq+="$(tput ritm)" ;;
         italics_on) seq+="$(tput sitm)" ;;
                off) seq+="$(tput sgr0)" ;; # me
      reverse | rev) seq+="$(tput rev)"  ;; # mr
         stdout_off) seq+="$(tput rmso)" ;;
          stdout_on) seq+="$(tput smso)" ;;
      underline_off) seq+="$(tput rmul)" ;; # ue
       underline_on) seq+="$(tput smul)" ;; # us

      fg)
        shift
        c=$1
        [[ -v ansi_color[$c] ]] && c=${ansi_color[$c]}
        seq+="$(tput setaf $c)"
        ;;

      bg)
        shift
        c=$1
        [[ -v ansi_color[$c] ]] && c=${ansi_color[$c]}
        seq+="$(tput setab $c)"
        ;;

      *)
        debug "*: $1"
        seq+="$(tput "$1")"
        ;;
    esac

    shift
  done

  debug "$seq"
  echo "$seq"
  return
}

export -f ansi

# http://mywiki.wooledge.org/BashFAQ/037

function colors256() {
  local c i j

  printf 'Standard 16 colors\n'
  for ((c = 0; c < 17; c++)); do
    printf "|%s%3d%s" "$(ansi fg "$c")" "$c" "$(ansi off)"
  done
  printf '|\n\n'

  printf 'Colors 16 to 231 for 256 colors\n'
  for ((c = 16, i = j = 0; c < 232; c++, i++)); do
    printf '|'
    ((i > 5 && (i = 0, ++j))) && printf ' |'
    ((j > 5 && (j = 0, 1))) && printf '\b \n|'
    printf '%s%3d%s' "$(ansi fg "$c")" "$c" "$(ansi off)"
  done
  printf '|\n\n'

  printf 'Greyscale 232 to 255 for 256 colors\n'
  for (( ; c < 256; c++)); do
    printf '|%s%3d%s' "$(ansi fg "$c")" "$c" "$(ansi off)"
  done
  printf '|\n'
}

export -f colors256
