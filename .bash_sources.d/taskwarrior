#!/bin/bash

# Functions and aliases specific to the taskwarrior program.
# http://taskwarrior.com

taskpath=$(command -v task)

if [ "$taskpath" != '' ]; then

  __task() {

    $taskpath "$@"

    if task _show | grep -q taskd.server; then
      # shellcheck disable=SC1117
      if task commands | grep -Eq "$1|$2\s.*RW"; then
        $taskpath sync
      fi
    fi

  }

  task=__task

  taskdatadir=$($task _get rc.data.location)
  taskdatadir=${taskdatadir//\~/"$HOME"}

  _task_command() {

    command=$1
    tid=$2
    shift
    shift
    "$task" "$tid" "$command" "$@"

  }

  declare -A TASK_COMMANDS
  TASK_COMMANDS=(
    [tanno]='annotate'
    [td]='done'
    [te]='edit'
    [ti]='info'
    [tm]='mod'
    [tstart]='start'
    [tstop]='stop'
  )

  for func in "${!TASK_COMMANDS[@]}"; do
    eval "$func () { _task_command ${TASK_COMMANDS[$func]} \"\$@\" ; }"
  done

  _task_report_or_add() {

    project=$1
    shift

    if [ "$#" -eq 0 ]; then
      report=${project##*.}
      "$task" "$report"
    else
      [ "$project" == 'incubate' ] && project="${project} wait:someday"
      $task add "project:$project" "$@"
    fi
  }

  _task_completed_but_not_done() {

    tag=$1
    tid=$2
    shift
    shift

    if [ "$#" -eq 0 ]; then
      echo "You must explain why this task wasn't done."
      return
    else
      "$task" "$tid" annotate "$@"
      "$task" "$tid" 'done' "$tag"
    fi
  }

  tskip() { _task_completed_but_not_done +skip "$@"; }
  tfail() { _task_completed_but_not_done +fail "$@"; }

  task_last_id() {

    local last_id
    last_id=$($task newest rc.verbose=nothing limit:1)
    last_id=${last_id# *}
    last_id=${last_id%% *}
    echo "$last_id"

  }

  task_last_uuid() {

    local last_id
    local last_uuid

    last_id=$(task_last_id)
    last_uuid=$($task "$last_id" _uuids)

    echo "$last_uuid"

  }

  # shellcheck disable=SC2139
  {
    alias context="$task context"
    alias tall="$task all -COMPLETED -DELETED"
    alias ta="$task add"
    alias trecurring="$task all status:recurring"
    alias ts="$task sync"
    alias t="$task"
  }

  shortcutsfile="${taskdatadir}/make_shortcuts"

  if [ -f "$shortcutsfile" ]; then
    while read -r line; do
      name=${line%% *}
      parms=${line#* }
      eval "$name () { $parms \"\$@\" ; }"
    done < <(cat "$shortcutsfile")
  fi
fi
