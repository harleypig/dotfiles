#!/bin/bash

# Debug tty login (ssh user@server):
# ssh -t localhost "PS4='[\$BASH_SOURCE[0]:\$LINENO]: ' bash -xl" |& tee login.log

# Debug no tty login (ssh user@server somecommand)
# ssh localhost "PS4='[\$BASH_SOURCE[0]:\$LINENO]: ' bash -xl" |& tee login.log

################################################################################
DOTFILES="$HOME"

[[ -L ${BASH_SOURCE[0]} ]] \
  && DOTFILES=$(dirname "$(readlink -nf "${BASH_SOURCE[0]}")")

export DOTFILES

##############################################################################
# this function takes one directory path and adds it to the existing path

# XXX: add check for existing directory and silently ignore it if it doesn't
#      exist.

addpath() {
  debug "adding $1 to path"
  PATH="${PATH}:$1"
}

##############################################################################
addpath "$DOTFILES/lib"
addpath "$DOTFILES/bin"

##############################################################################
debug() { true; }
command -v debug &> /dev/null && source debug

##############################################################################
declare -a BIN_DIRS

# XXX: Move to a file to be read from
# !!! Do not alphabetize, order is important here.

BIN_DIRS+=("$HOME/bin")
BIN_DIRS+=("$HOME/.local/bin")
BIN_DIRS+=('/usr/lib/ccache/bin')
BIN_DIRS+=("/usr/lib/dart/bin")
BIN_DIRS+=("$HOME/bin")
BIN_DIRS+=("$HOME/.vim/bin")
BIN_DIRS+=("$HOME/.cabal/bin")
BIN_DIRS+=("$HOME/.minecraft/bin")
BIN_DIRS+=("$HOME/Dropbox/bin")
BIN_DIRS+=("$HOME/videos/bin")
BIN_DIRS+=("$HOME/projects/depot_tools")
BIN_DIRS+=("$HOME/projects/android-sdk/tools")
BIN_DIRS+=("$HOME/projects/android-sdk/platform-tools")

for d in "${BIN_DIRS[@]}"; do
  addpath "$d"
done

unset BIN_DIRS

################################################################################
# Check if various dotfiles are linked properly

[[ -x "$(command -v check-dotfiles 2> /dev/null)" ]] && check-dotfiles

##############################################################################
# Source startup files

# XXX: check for find and sort and fail if not found

source_files() {
  local dir="${1?-must pass directory of files to source}"
  [[ -d $dir ]] || return 0

  local end="${2?-must pass end value of filename to source}"

  local -a files
  readarray -t files < <(/usr/bin/find "$dir" -iname "*_$end" | /usr/bin/sort)

  for file in "${files[@]}"; do
    [[ -r $file ]] && {
      debug "Sourcing $file ..."
      source "$file" || debug "... unable to source $file"
    }
  done
}

export -f debug addpath source_files

source_files "$DOTFILES/.bash_profile.d" 'profile'
source_files "$HOME/.bash_profile.d" 'profile'
source_files "$DOTFILES/.bashrc.d" 'rc'
source_files "$HOME/.bashrc.d" 'rc'

unset debug addpath source_files
