---
- name: Make sure the github version file exists
  file:
    path: "{{ github_version_tracking_file }}"
    state: touch
    mode: "{{ github_version_tracking_file_mode }}"

- name: Slurp the github version tracking file
  slurp:
    src: "{{ github_version_tracking_file }}"
  register: github_version_tracking_file_content

- name: Convert github version tracking file content to YAML and register it
  set_fact:
    github_version_tracking_yaml: "{{ (github_version_tracking_file_content['content'] | b64decode) | from_yaml }}"

- name: Set current version
  set_fact:
    github_asset_current_version: "{{ github_version_tracking_yaml[github_asset_name] | default('0') }}"

#- name: Dump version information using the github_asset_name variable
#  debug:
#    msg: "Current version of {{ github_asset_name }}: {{ github_asset_current_version }}"

- name: Get the latest release of {{ github_repo }} from GitHub
  uri:
    url: "https://api.github.com/repos/{{ github_repo }}/releases/latest"
    method: GET
    return_content: yes
    status_code: 200
    headers:
      Accept: "application/vnd.github.v3+json"
  register: github_release

- name: Set latest version
  set_fact:
    github_latest_version: "{{ github_release.json.tag_name }}"
    github_download_url: "{{ github_release.json.assets | selectattr('name', 'match', github_asset_pattern) | map(attribute='browser_download_url') | first }}"

#- name: Dump latest release information
#  debug:
#    msg: |
#      Latest version: {{ github_latest_version }}
#      URL: {{ github_download_url }}

- name: Compare current version against latest version
  set_fact:
    github_version_mismatch: "{{ github_asset_current_version != github_latest_version }}"
  register: github_version_mismatch

 - name: Include download tasks if there is a version mismatch
   include_tasks: download_file.yml
   when: github_version_mismatch
