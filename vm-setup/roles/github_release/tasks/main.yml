---
# This role downloads a GitHub release

- name: Get the latest release of {{ github_repo }} from GitHub
  uri:
    url: "https://api.github.com/repos/{{ github_repo }}/releases/latest"
    method: GET
    return_content: yes
    status_code: 200
    headers:
      Accept: "application/vnd.github.v3+json"
  register: github_release

-
- name: Fail if nothing found
  fail:
    msg: "No matching asset found for pattern {{ github_asset_pattern }}"
  when: github_release.json.assets | selectattr('name', 'match', github_asset_pattern) | list | count == 0

-  vars:
    github_download_url: "{{ github_release.json.assets | selectattr('name', 'match', github_asset_pattern) | map(attribute='browser_download_url') | first }}"
    github_latest_version: "{{ github_release.json.tag_name }}"
    github_asset_pattern: "{{ github_asset_pattern | regex_replace('.*?(\\w+\\.[\\w.]+)$', '\\1') }}"
    set_fact:
      github_version_mismatch: "{{ github_latest_version != current_asset_version.stdout | default('0.0.0') }}"

  -
    include_tasks: version_tracking.yml
    vars:
      github_asset_name: "{{ github_asset_name_pattern }}"
      github_version_tracking_file: "/path/to/version_tracking_file"
      github_version_mismatch: "{{ github_version_mismatch }}"

  - name: Check if version tracking file exists
    stat:
      path: "{{ playbook_dir }}/.github_release_installed_versions"
    register: version_tracking_file

  - name: Read current version of the asset from the version tracking file
    command: "grep '{{ github_asset_name }}' {{ playbook_dir }}/.github_release_installed_versions | cut -d '=' -f 2"
    register: current_asset_version
    changed_when: false
    failed_when: false
    when: version_tracking_file.stat.exists

  - name: Update version tracking file with the new version
    lineinfile:
      path: "{{ playbook_dir }}/.github_release_installed_versions"
      regexp: '^{{ github_asset_name }}='
      line: "{{ github_asset_name }}={{ github_latest_version }}"
      create: yes
    when: github_version_mismatch | default(true)

  - name: Download file
    get_url:
      url: "{{ github_download_url }}"
      dest: "{{ github_dest_path }}"
      mode: '{{ github_file_mode | default("0644") }}'
    when: github_version_mismatch | default(true)
    register: github_download_result

  - name: Ensure the downloaded file has the proper permissions
    file:
      path: "{{ github_dest_path }}"
      mode: '{{ github_file_mode | default("0644") }}'
      state: file
    when: github_version_mismatch | default(true) and github_download_result is changed
