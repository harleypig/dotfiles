---
- name: Check if git-bug is installed and get the version
  command: "{{ git_bug_version_command }}"
  register: git_bug_installed_version
  failed_when: false
  changed_when: false
  check_mode: no

- name: Set fact for installed git-bug version
  set_fact:
    git_bug_installed_version: "{{ git_bug_installed_version.stdout | regex_search('^git-bug version (.+)$', '\\1') | default('0.0.0') }}"
  when: git_bug_installed_version.rc == 0

- name: Get the latest release of git-bug from GitHub
  uri:
    url: "https://api.github.com/repos/{{ git_bug_repo }}/releases/latest"
    method: GET
    return_content: yes
    status_code: 200
    headers:
      Accept: "application/vnd.github.v3+json"
  register: git_bug_release

- name: Set git-bug download URL and version
  set_fact:
    git_bug_download_url: "{{ git_bug_release.json.assets | selectattr('name', 'match', 'git-bug_linux_amd64') | map(attribute='browser_download_url') | first }}"
    git_bug_latest_version: "{{ git_bug_release.json.tag_name }}"

- name: Fail if no matching git-bug binary is found
  fail:
    msg: "No matching git-bug binary found for pattern git-bug_linux_amd64"
  when: git_bug_release.json.assets | selectattr('name', 'match', 'git-bug_linux_amd64') | list | count == 0

- name: Debug downloaded git-bug binary information
  debug:
    msg: "Downloaded git-bug binary from {{ git_bug_download_url }} with version {{ git_bug_latest_version }}"

- name: Compare installed and latest git-bug versions
  set_fact:
    git_bug_version_mismatch: "{{ git_bug_installed_version != git_bug_latest_version }}"

- name: Skip download if the installed version matches the latest version
  meta: end_play
  when: not git_bug_version_mismatch

- name: Download the latest git-bug binary
  get_url:
    url: "{{ git_bug_download_url }}"
    dest: "{{ git_bug_binary_path }}"
    mode: '0755'
  when: git_bug_version_mismatch
  register: git_bug_download_result

- name: Ensure git-bug is executable
  file:
    path: "{{ git_bug_binary_path }}"
    mode: '0755'
    state: file
  when: git_bug_version_mismatch
