------------------------------------------------------------------------------
Add task to set sudoers for a user:
  Defaults:your_username timestamp_timeout=60

------------------------------------------------------------------------------
figure out how to use ansible-vault so I don't have to keep typing my password

------------------------------------------------------------------------------
figure out how to use `dconf dump /`, `gsettings` and python to load dconf
settings, then load the schemas and find the default value and only dump the
settings that have been changed.

------------------------------------------------------------------------------
Investigate and integrate YAML and Ansible formatting tools to ensure
consistent code style.

------------------------------------------------------------------------------
add playbook for setting user groups (on ubuntu modify /etc/adduser.conf) Use
`groups` command to see what you've got setup already. Is there a way to
modify this piecemeal, so if docker is not installed then it's not set?

------------------------------------------------------------------------------
create a role to install repositories in projects directory

------------------------------------------------------------------------------
create a (separate?) role to setup dotfiles and dotvim and private_dotfiles

------------------------------------------------------------------------------
add molecule tests

* Variable Definition Test: Verify that all required variables are defined for
  each repository.

* Repository Key Installation Test: Check if the repository public key is
  correctly installed on the system.

* Repository Addition Test: Ensure that the repository is correctly added to
  the system's package manager.

* Idempotence Test: Confirm that running the role/task again does not make any
  changes if the repository is already added.

* Error Handling Test: Test the role's ability to handle errors, such as
  attempting to add an undefined repository.

* Validation Test: Verify that the validation step correctly identifies
  undefined repositories and provides a meaningful error message.

* Platform Compatibility Test: Ensure that the role works across different
  distributions or versions if applicable.

* Security Test: Check that the key installation process is secure and that
  keys are obtained from a trusted source.

* Cleanup Test: If the role includes the ability to remove repositories, test
  that the removal process works correctly and cleans up any associated files.

------------------------------------------------------------------------------
add todos as git-bugs once that's setup for this repo

------------------------------------------------------------------------------
create and add a script to copy and cleanup my firefox profile so that it can
be installed via an ansible task

Questions:
  Can I name the profile what I want or does it have to be a hashed value like
  it is by default?

  How do I modify the profiles.ini file from ansible to make my new profile
  the default profile?

1. Clear Cache and Offline Data Manually in Firefox:

Before copying the profile, you can clear cache and offline website data
through Firefox's settings. This can significantly reduce the profile size.
From the Profile Folder: Look for and delete the Cache, OfflineCache, and
storage (especially storage/default containing site-specific offline data)
directories within the profile folder.

2. Remove Unnecessary Files Minidumps:

Delete the minidumps folder if present, which contains crash reports.

datareporting and healthreport Folders: These contain telemetry and health
reports which are not necessary for the profile to function on another
machine.

saved-telemetry-pings Folder: Contains telemetry data that can be removed.

3.  Compact Databases Firefox uses SQLite databases for storing various types
of data (like history and cookies).

These databases can be compacted to reduce their size.

Use SQLite Tools: Tools like sqlite3 can be used to compact databases. For
each .sqlite file in the profile directory, you can run: bash

  sqlite3 [database_file_name].sqlite "VACUUM;"

This command compacts the database by removing unused space.

4. Review and Remove Extensions

Extensions: If there are extensions that are not needed, consider removing
them from within Firefox before copying the profile. Extensions can add
significantly to the profile size through their own data storage.

5. Exclude Specific Files

places.sqlite (Bookmarks and History): If not needed, you can remove
places.sqlite, but be aware this removes all bookmarks and history.

sessionstore-backups Folder: Contains session backup files which can be large.
If you don't need to restore previous sessions, this can be safely removed.

6. Create a New Profile and Migrate Selected Data

If the profile is still larger than desired, consider creating a new profile
and manually migrating only the essential data (like bookmarks, which can be
exported and imported through Firefox's Library menu).

Automating Cleanup

For automating these tasks, especially if deploying profiles across multiple
machines, you might script the deletion of certain directories and files
within the profile before copying it. For example, a simple bash script could
delete cache directories and compact databases as part of your deployment
process.

Final Steps

After paring down the profile, ensure it still contains everything you need by
testing it on your local Firefox installation. Once confirmed, proceed with
copying the slimmed-down profile using your preferred method, like Ansible,
for deployment.

------------------------------------------------------------------------------

