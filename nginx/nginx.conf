worker_processes auto;

events {
  worker_connections 1024;
}

http {
  include mime.types;

  default_type application/octet-stream;

  log_format main
  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log info;

  sendfile on;
  keepalive_timeout 90s;

  #types_hash_max_size 2048;
  #server_names_hash_bucket_size 128;
  #server_names_hash_max_size 2048;

  ############################################################
  # SSL setup

  # This file should also include any necessary intermediate certificates.
  # For example for StartSSL that would be https://www.startssl.com/certs/class1/sha2/pem/sub.class1.server.sha2.ca.pem
  # For Let's Encrypt use /etc/letsencrypt/live/diaspora.example.org/fullchain.pem
  # and /etc/letsencrypt/diaspora.example.org/privkey.pem

  ssl_certificate /path/to/certs.crt;
  ssl_certificate_key /path/to/certs.key;

  # Taken from https://wiki.mozilla.org/Security/Server_Side_TLS
  # You might want to make these global

  # generate with openssl dhparam 2048 > /path/to/dhparam.pem
  ssl_dhparam /path/to/certs.pem

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK';
  ssl_session_timeout 5m;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:50m;

  ############################################################
  # redirect any and all http to https

  server {
    listen 80;
    listen [::]:80;

    access_log /var/log/nginx/redirect_access.log main;
    error_log /var/log/nginx/redirect_error.log info;

    server_name _;
    return 301 https://$host$request_uri;
  }

  ############################################################
  # load blocks

  include blocks-enabled/*;
}
