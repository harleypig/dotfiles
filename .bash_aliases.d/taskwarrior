#!/bin/bash

# Functions and aliases specific to the taskwarrior program.
# http://taskwarrior.com

task=$(command -v task)

if [ "$task" != '' ]; then

  taskdatadir=$($task _get rc.data.location)
  taskdatadir=${taskdatadir//\~/"$HOME"}

  function _task_command {

    command=$1 ; tid=$2
    shift      ; shift
    # shellcheck disable=SC2086 disable=SC2048
    $task $tid $command $*

  }

  declare -A TASK_COMMANDS
  TASK_COMMANDS=(
    [tanno]="annotate"
    [td]="done"
    [te]="edit"
    [ti]="info"
    [tm]="mod"
    [tstart]="start"
    [tstop]="stop"
  )

  for func in "${!TASK_COMMANDS[@]}"; do
    eval "function $func { _task_command ${TASK_COMMANDS[$func]} \$* ; }"
  done

  function _task_report_or_add {

    project=$1
    shift

    if [ "$#" -eq 0 ]; then
      report=${project##*.}
      # shellcheck disable=SC2086
      $task $report
    else
      [ "$project" == 'incubate' ] && project="${project} wait:someday"
      # shellcheck disable=SC2086 disable=SC2048
      $task add project:$project $*
    fi
  }

  function _task_completed_but_not_done {

    tag=$1 ; tid=$2
    shift  ; shift

    # shellcheck disable=SC2048 disable=SC2086

    if [ "$#" -eq 0 ]; then
      echo "You must explain why this task wasn't done."
      return
    else
      $task $tid annotate $*
      # shellcheck disable=SC1010
      $task $tid done $tag
    fi
  }

  function tskip { _task_completed_but_not_done +skip "$*" ; }
  function tfail { _task_completed_but_not_done +fail "$*" ; }

  function task_last_id {

    local last_id
    last_id=$($task newest rc.verbose=nothing limit:1)
    last_id=${last_id# *}
    last_id=${last_id%% *}
    echo "$last_id"

  }

  function task_last_uuid {

    local last_id
    local last_uuid

    last_id=$(task_last_id)
    last_uuid=$($task "$last_id" _uuids)

    echo "$last_uuid"

  }

  # shellcheck disable=SC2139
  {
    alias context="$task context"
    alias tall="$task all -COMPLETED -DELETED"
    alias ta="$task add"
    alias ts="$task sync"
    alias t="$task"
  }

  shortcutsfile="${taskdatadir}/make_shortcuts"

  if [ -f "$shortcutsfile" ]; then
    while read -r line ; do
      name=${line%% *}
      parms=${line#* }
      eval "function $name { $parms \$* ; }"
    done < <(cat "$shortcutsfile")
  fi
fi
