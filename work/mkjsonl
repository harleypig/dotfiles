#!/usr/bin/env python

import sys
import argparse

import jsonlines
import yaml

#-----------------------------------------------------------------------------
def load_yaml(filename):
    """
    Load a YAML file and return the data.

    Args:
        filename (str): The path to the YAML file to be loaded.

    Returns:
        list/dict: The data loaded from the YAML file, or False if an error occurred.

    This function attempts to open and read the specified YAML file using the yaml
    library. If the file is successfully read and parsed, the data is returned.
    If there is an error (e.g., file not found, parse error), the error is printed
    to stderr, and the function returns False.
    """

    try:
        with open(filename, 'r') as yf:
            data = yaml.load(yf, Loader=yaml.FullLoader)

    except Exception as e:
        print(f"Error loading {filename}: {e}", file=sys.stderr)
        return False

    return data

#-----------------------------------------------------------------------------
def save_jsonl(filename, data=[]):
    """
    Save data to a JSON Lines file.

    Args:
        filename (str): The path to the JSON Lines file to be written.
        data (list): A list of dictionaries to be written to the file.

    This function attempts to open the specified JSON Lines file and write the
    data to it. If there is an error during file opening or writing, the error
    is printed to stderr, and the program exits with status code 1.
    """

    try:
        with jsonlines.open(filename, mode='w') as jf:
            jf.write_all(data)

    except Exception as e:
        print(f"Error saving to {filename}: {e}", file=sys.stderr)
        sys.exit(1)

#-----------------------------------------------------------------------------
def convert(yaml_files, jsonl_file):
    """
    Convert a list of YAML files to a single JSON Lines file.

    Args:
        yaml_files (list of str): A list of paths to the YAML files to be converted.
        jsonl_file (str): The path to the JSON Lines file to be written.

    If `load_yaml` returns False for any file, indicating an error, that file will be
    skipped, and the conversion will continue with the next file.
    """

    objs = []

    for yaml_file in yaml_files:
        raw = load_yaml(yaml_file)

        if not raw:
            continue

        for el in raw:
            for key, value in el.items():
                objs.append({"input_text":f"{key}", "output_text": f"{value}"})

    save_jsonl(jsonl_file, objs)

#-----------------------------------------------------------------------------
if __name__ == "__main__":
    helptext = """
Each YAML file should contain a list of dictionaries, where each dictionary
represents a key-value pair that will be transformed into a JSON object in
the JSON Lines file. The keys and values in the YAML file should be strings.

The output JSON Lines file will contain JSON objects, each with "input_text"
and "output_text" keys. The values for these keys will be taken from the key-value
pairs in the input YAML files. For example, if a YAML file contains the following:

    - greeting: "Hello, world!"
    - farewell: "Goodbye, world!"

The output JSON Lines file will contain:

    {"input_text": "greeting", "output_text": "Hello, world!"}
    {"input_text": "farewell", "output_text": "Goodbye, world!"}

"""

    parser = argparse.ArgumentParser(description=helptext,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('yaml_files', type=str,
                        nargs='+',
                        help='The YAML file(s) to convert')

    parser.add_argument('-o', '--output', type = str,
                        dest='jsonl_file',
                        required=True,
                        help='The JSONL file to output')

    args = parser.parse_args()

    convert(args.yaml_files, args.jsonl_file)
