#!/bin/bash

##############################################################################
# Settings

azure_url_pattern="dev.azure.com"
projects_path="$HOME/projects"
clone_path=
no_pull=0
no_clone=0
project=

declare -A local_repos clone_repos
declare -a exclude_repos include_repos

##############################################################################
# Functions

#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() {
  (($#)) && warn "$@"
  exit 1
}

#-----------------------------------------------------------------------------
usage() {
  local msg="

Usage: ${0##*/} [OPTIONS]

This script manages local copies of Azure DevOps repositories. It updates
existing repositories and clones new ones as needed.

While using both --exclude and --include is allowed, be aware that exclusion
takes precedence over inclusion, which might lead to unexpected results.

New repositories are clone in '$projects_path/<project>'.

Options:
  --no-pull|-np            Do not pull updates for existing repositories
  --no-clone|-nc           Do not clone new repositories
  --project|-p <project>   Specify the Azure DevOps project (defaults to the Azure CLI configured project)
  --exclude <file>         Path to a file containing a list of repository names to exclude
  --include <file>         Path to a file containing a list of repository names to include
  --help|-h                Show this help message and exit
"

  (($#)) && msg="${msg}

$(printf '%s\n' "$@")
"

  die "$msg"
}

#-----------------------------------------------------------------------------
# XXX: Change to use ParseParams when it's fixed.

parse_params() {
  local param

  while [[ "$1" != "" ]]; do
    param="$1"
    case $param in
      --no-pull|-np)
        no_pull=1
        ;;
      --no-clone|-nc)
        no_clone=1
        ;;
      --project|-p)
        shift
        ;;
      --exclude)
        shift
        [[ -r "$1" ]] \
          || die "The file specified with --exclude does not exist: $1"

        mapfile -t exclude_repos < "$1"
        ;;
      --include)
        shift
        [[ -r "$1" ]] \
          || die "The file specified with --include does not exist: $1"

        mapfile -t include_repos < "$1"
        ;;
      --help|-h)
        usage
        ;;
      *)
        usage "Unknown parameter: $param"
        ;;
    esac
    shift
  done

  ((no_pull)) && ((no_clone)) && usage "--no-pull and --no-clone are mutually exclusive"

  [[ -z $project ]] && {
    project="$(az devops configure --list 2> /dev/null \
      | grep '^project' | awk '{print $3}')" \
    || die "Unable to detect project in current configuration."
  }

  clone_path="$projects_path/$project"
}

#-----------------------------------------------------------------------------
local_repos() {
  local project_path repo_path repo_name

  while IFS= read -r -d '' gitdir; do
    grep -q "$azure_url_pattern" "$gitdir/config" || continue

    project_path="${gitdir%/.git}"
    repo_path="${project_path#$projects_path}"
    repo_name="${repo_path##*/}"

    [[ -n ${repos[$repo_name]} ]] && {
      warn "duplicate $repo_name (${repos[$repo_name]}), not pulling $repo_path"
      continue
    }

    local_repos[$repo_name]="$repo_path"

    ((no_pull)) && continue

    cd "$project_path" || die "Unable to change to $project_path."
    [[ -n "$(git status --porcelain)" ]] && {
      warn "$repo_name ($repo_path) is dirty, not pulling"
      continue
    }

    echo "Updating $repo_name ..."

    git fetch --all 2> /dev/null \
      || warn "Could not fetch $repo_name ($repo_path)"

    git fetch --tags 2> /dev/null \
      || warn "Could not fetch tags for $repo_name ($repo_path)"

  done < <(find "$projects_path" -type d -name '.git' -print0)
}

#-----------------------------------------------------------------------------
clone_repos() {
  local repos

  readarray -t repos < <(az repos list --project "$project" --output json 2> /dev/null \
    | jq -r '.[] | .remoteUrl')

  [[ ${PIPESTATUS[0]} -ne 0 ]] && die "Could not run 'az repos list'."

  for repo in "${repos[@]}"; do
    name="${repo##*/}"
    [[ -n ${local_repos[$name]} ]] && continue

    # Exclude takes precedence over include
    if [[ " ${exclude_repos[@]} " =~ " ${name} " ]]; then
      continue
    elif [[ -n "${include_repos[*]}" && ! " ${include_repos[@]} " =~ " ${name} " ]]; then
      continue
    fi

    cd "$clone_path" || die "Unable to change to $clone_path"
    echo "Cloning $name ..."
    git clone "$repo"
  done
}

##############################################################################
# Main

[[ -x "$(command -v az)" ]] \
  || usage "Azure CLI is required to run this script."

parse_params "$@"

cd "$projects_path" || die "Unable to change to $projects_path."

local_repos
clone_repos
