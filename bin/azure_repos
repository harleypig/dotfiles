#!/bin/bash

##############################################################################
# Settings

azure_url_pattern="dev.azure.com"
projects_path="$HOME/projects"
no_pull=0
no_clone=0
project=
exclude=
include=

declare -A local_repos clone_repos

##############################################################################
# Functions

#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() {
  (($#)) && warn "$@"
  exit 1
}

#-----------------------------------------------------------------------------
usage() {
  msg = "

usage:

"

  (($#)) && msg="${msg}

$@
"

  die "$msg"
}

#-----------------------------------------------------------------------------
# XXX: Change to use ParseParams when it's fixed.

parse_params() {
  local param

  while [[ "$1" != "" ]]; do
    param="$1"
    case $param in
      --no-pull|-np)
        no_pull=1
        ;;
      --no-clone|-nc)
        no_clone=1
        ;;
      --project|-p)
        shift
        project="$1"
        ;;
      --exclude)
        shift
        exclude="$1"
        ;;
      --include)
        shift
        include="$1"
        ;;
      --help|-h)
        usage
        ;;
      *)
        usage "Unknown parameter: $param"
        ;;
    esac
    shift
  done

  ((no_pull)) && ((no_clone)) && usage "--no-pull and --no-clone are mutually exclusive"
}

#-----------------------------------------------------------------------------
local_repos() {
  local project_path repo_path repo_name

  while IFS= read -r -d '' gitdir; do
    grep -q "$azure_url_pattern" "$gitdir/config" || continue

    project_path="${gitdir%/.git}"
    repo_path="${project_path#$projects_path}"
    repo_name="${repo_path##*/}"

    [[ -n ${repos[$repo_name]} ]] && {
      warn "duplicate $repo_name (${repos[$repo_name]}), not pulling $repo_path"
      continue
    }

    local_repos[$repo_name]="$repo_path"

  done < <(find "$projects_path" -type d -name '.git' -print0)
}

#-----------------------------------------------------------------------------
mk_clone_list() {
  local repos

  readarray -t repos < <(az repos list --output json \
    | jq -r '.[] | .remoteUrl')

  [[ ${PIPESTATUS[0]} -ne 0 ]] && die "Could not run 'az repos list'."

  for repo in "${repos[@]}"; do
    name="${repo##*/}"
    [[ -n ${local_repos[$name]} ]] && continue
    clone_repos[$name]="$remoteUrl"
  done
}

##############################################################################
# Main

cd "$projects_path" || die "Unable to change to $projects_path."

mk_clone_list
local_repos
