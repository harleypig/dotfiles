#!/bin/bash

## If --check-dirty is passed, check for a clean state and exit accordingly
#if ((CHECK_DIRTY)); then
#  ec=0
#  [[ -z $(git status --porcelain 2> /dev/null) ]] && ec=1
#  exit $ec
#fi

##############################################################################
# Settings

azure_url_pattern="dev.azure.com"
projects_path="$HOME/projects"

declare -A local_repos clone_repos

##############################################################################
# Functions

#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() {
  (($#)) && warn "$@"
  exit 1
}

#-----------------------------------------------------------------------------
local_repos() {
  local repo_path repo_name

  while IFS= read -r -d '' gitdir; do
    grep -q "$azure_url_pattern" "$gitdir/config" || continue

    repo_path="${gitdir#$projects_path/}"
    repo_path="${repo_path%/.git}"
    repo_name="${repo_path##*/}"

    [[ -n ${repos[$repo_name]} ]] && {
      warn "duplicate $repo_name (${repos[$repo_name]}), not adding $repo_path"
      continue
    }

    local_repos[$repo_name]="$repo_path"
  done < <(find "$HOME/projects" -type d -name '.git' -print0)
}

#-----------------------------------------------------------------------------
mk_clone_list() {
  local repos

  readarray -t repos < <(az repos list --output json \
    | jq -r '.[] | .remoteUrl')

  [[ ${PIPESTATUS[0]} -ne 0 ]] && die "Could not run 'az repos list'."

  for repo in "${repos[@]}"; do
    name="${repo##*/}"
    [[ -n ${local_repos[$name]} ]] && continue
    clone_repos[$name]="$remoteUrl"
  done
}

##############################################################################
# Main

mk_clone_list
local_repos
