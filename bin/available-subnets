#!/usr/bin/env python3

#import sys
import argparse
from netaddr import IPNetwork, AddrFormatError

##############################################################################
#-----------------------------------------------------------------------------
def load_subnets(file_path):
  try:
    with open(file_path, 'r') as fh:
      subnets = fh.readlines()
      valid_subnets = []

      for subnet in subnets:
        try:
          valid_subnets.append(IPNetwork(subnet.strip()))

        except (AddrFormatError, ValueError) as e:
          raise argparse.ArgumentTypeError(
              f"Invalid subnet '{subnet.strip()}': {e}"
          )

      return valid_subnets

  except IOError as e:
    raise argparse.ArgumentTypeError(
        f"Error: Could not read from '{file_path}': {e}"
    )

#-----------------------------------------------------------------------------
def valid_cidr_range(cidr):
  try:
    return IPNetwork(cidr)

  except (AddrFormatError, ValueError) as e:
    raise argparse.ArgumentTypeError(f"Invalid CIDR range: {cidr}. Error: {e}")

##############################################################################
#-----------------------------------------------------------------------------
def validate_ranges(ranges, base_range):
  base_prefixlen = base_range.prefixlen

  for size in ranges:
    if not (base_prefixlen <= size <= 30):
      raise argparse.ArgumentTypeError(
          f"Invalid required range /{size} for base range /{base_prefixlen}. "
          f"Required range must be within /{base_prefixlen} to /30."
      )

#-----------------------------------------------------------------------------
def find_range(base_range, taken_subnets, required_ips):
  available_ips = []

  for ip in base_range.iter_hosts():
    if any(ip in subnet for subnet in taken_subnets):
      return available_ips

    if len(available_ips) == required_ips:
      return available_ips

    available_ips.append(ip)

  return available_ips

#-----------------------------------------------------------------------------
def open_subnets(base_range, used_subnets, ranges):
  taken_subnets = list(used_subnets)
  # Take the order the user gives by default
  #ranges.sort(reverse=True)

  track_open = {i + 1: [ranges[i], ''] for i in range(len(ranges))}

  for range in ranges:
    required_ips = 2**(32 - range)
    new_range = find_range(base_range, taken_subnets, required_ips)

    #if len(new_range) < range:



#    available_ips = []
#    required_ips = 2**(32 - range)
#
#    for ip in base_range.iter_hosts():
#      if any(ip in subnet for subnet in taken_subnets):
#        if len(available_ips) == required_ips:
#          for smaller_range in ranges:
#            if smaller_range > len(available_ips):
#              continue
#
#            smaller_required_ips = 2**(32 - smaller_range)
#            if len(available_ips) >= smaller_required_ips:
#              range = smaller_range  # Use the smaller range
#              required_ips = smaller_required_ips
#              break
#
#          available_ips.append(ip)
#
#          new_subnet = IPNetwork('%s/%s' % (available_ips[0], range))
#          taken_subnets.append(new_subnet)
#          yield new_subnet
#          break

##############################################################################
#-----------------------------------------------------------------------------
def parseargs():
  parser = argparse.ArgumentParser(
      description='Find available subnets within a specified range.'
  )

  parser.add_argument(
      '--base-range',
      type=valid_cidr_range,
      default='10.7.0.0/17',
      help=
      'Base CIDR range to find available subnets within. Default is 10.7.0.0/17.'
  )

  parser.add_argument(
      '--used-subnets',
      type=load_subnets,
      default=[],
      help='File containing used subnets, one per line.'
  )

  parser.add_argument(
      'ranges',
      type=int,
      nargs='+',
      help=
      'Required sizes of available subnets, specified as a list of subnet sizes (e.g., 28 27 27 23).'
  )

  return parser.parse_args()

#-----------------------------------------------------------------------------
def main():
  args = parseargs()

  validate_ranges(args.ranges, args.base_range)

  track_open = {i + 1: args.ranges[i] for i in range(len(args.ranges))}

  subnets = open_subnets(args.base_range, args.used_subnets, args.ranges)

  for subnet in subnets:
    print(subnet)

##############################################################################
#-----------------------------------------------------------------------------
if __name__ == '__main__':
  main()
