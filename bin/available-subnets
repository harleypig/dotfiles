#!/usr/bin/env python3

#import sys
import argparse
from netaddr import IPNetwork, AddrFormatError

##############################################################################
#-----------------------------------------------------------------------------
def load_subnets(file_path):
  try:
    with open(file_path, 'r') as fh:
      subnets = fh.readlines()
      valid_subnets = []

      for subnet in subnets:
        try:
          valid_subnets.append(IPNetwork(subnet.strip()))

        except (AddrFormatError, ValueError) as e:
          raise argparse.ArgumentTypeError(
              f"Invalid subnet '{subnet.strip()}': {e}"
          )

      return valid_subnets

  except IOError as e:
    raise argparse.ArgumentTypeError(
        f"Error: Could not read from '{file_path}': {e}"
    )

#-----------------------------------------------------------------------------
def valid_cidr_range(cidr):
  try:
    return IPNetwork(cidr)

  except (AddrFormatError, ValueError) as e:
    raise argparse.ArgumentTypeError(f"Invalid CIDR range: {cidr}. Error: {e}")

##############################################################################
#-----------------------------------------------------------------------------
def validate_ranges(ranges, base_range):
  base_prefixlen = base_range.prefixlen

  for size in ranges:
    if not (base_prefixlen <= size <= 30):
      raise argparse.ArgumentTypeError(
          f"Invalid required range /{size} for base range /{base_prefixlen}. "
          f"Required range must be within /{base_prefixlen} to /30."
      )

#-----------------------------------------------------------------------------
def find_range(base_range, taken_subnets, required_ips):
  available_ips = []

  # Calculate the starting point based on the third octet and start iterating from there
  start_ip_index = (base_range.ip.words[2] << 8) + base_range.ip.words[3]
  end_ip_index = (1 << (32 - base_range.prefixlen)) - 1
  #base_ip_index = int(base_range.network)

  for ip_index in range(start_ip_index, end_ip_index + 1):
    ip = base_range.network + ip_index

    if ip >= base_range.broadcast:
      break

    if any(ip in subnet for subnet in taken_subnets):
      available_ips = []
      continue

    elif len(available_ips) == required_ips:
      return available_ips

    else:
      available_ips.append(ip)

  raise ValueError("Not enough free space for requested range.")

#-----------------------------------------------------------------------------
def open_subnets(base_range, used_subnets, ranges):
  taken_subnets = list(used_subnets)
  track_open = {ix: [x, ''] for ix, x in enumerate(ranges)}

  for pos, range in enumerate(ranges):
    required_ips = 2**(32 - range)

    try:
      new_range = find_range(base_range, taken_subnets, required_ips)

    except ValueError as e:
      raise ValueError(
          f"Could not find an open subnet for /{range} within the base range: {e}"
      )

    if len(new_range) != required_ips:
      continue

    new_subnet = IPNetwork(str(new_range[0]) + '/' + str(range))
    taken_subnets.append(new_subnet)
    track_open[pos][1] = str(new_subnet.cidr)

  return [track_open[pos][1] for pos in track_open if track_open[pos][1]]

##############################################################################
#-----------------------------------------------------------------------------
def parseargs():
  parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
      description='''Find available subnets within a specified base range.

This script calculates available subnets within a given base CIDR range, taking into account any subnets that are already in use. It is designed to be flexible and can handle non-standard base ranges, such as starting from a specific IP within the range rather than the beginning of the CIDR block.

For example, if you specify a base range of 10.7.25.0/17, the script will consider the availability of subnets starting from 10.7.25.0, rather than 10.7.0.0, which is the technical start of the /17 block. This allows for more precise control over the subnetting within larger network spaces.

The script also accepts a list of required subnet sizes and attempts to find contiguous blocks of IP addresses within the base range that are not marked as used. It outputs the calculated subnets in CIDR notation.

If the script cannot find enough contiguous IP addresses to fulfill a requested subnet size, it will raise an error indicating the lack of available space within the base range.'''
  )

  parser.add_argument(
      '--base-range',
      type=valid_cidr_range,
      default='10.7.0.0/17',
      help=
      'Base CIDR range to find available subnets within. Default is 10.7.0.0/17.'
  )

  parser.add_argument(
      '--used-subnets',
      type=load_subnets,
      default=[],
      help='File containing used subnets, one per line.'
  )

  parser.add_argument(
      'ranges',
      type=int,
      nargs='+',
      help=
      'Required sizes of available subnets, specified as a list of subnet sizes (e.g., 28 27 27 23).'
  )

  return parser.parse_args()

#-----------------------------------------------------------------------------
def main():
  args = parseargs()

  validate_ranges(args.ranges, args.base_range)

  subnets = open_subnets(args.base_range, args.used_subnets, args.ranges)

  for subnet in subnets:
    print(subnet)

##############################################################################
#-----------------------------------------------------------------------------
if __name__ == '__main__':
  main()
