#!/usr/bin/env python3

#import sys
import argparse
from netaddr import IPNetwork, IPAddress

##############################################################################
#-----------------------------------------------------------------------------
def find_available_subnets(base_range, existing_subnets, required_size):
  base_net = IPNetwork(base_range)
  existing_nets = [IPNetwork(subnet.strip()) for subnet in existing_subnets]
  available_ips = []

  for ip in base_net.iter_hosts():
    if not any(ip in subnet for subnet in existing_nets):
      available_ips.append(ip)
      if len(available_ips) == required_size:
        yield IPNetwork('%s/%s' % (available_ips[0], base_net.prefixlen))
        available_ips = []

#-----------------------------------------------------------------------------
def read_subnets_from_file(file_path):
  with open(file_path, 'r') as file:
    return file.readlines()

##############################################################################
#-----------------------------------------------------------------------------
def parseargs():
  parser = argparse.ArgumentParser(
      description='Find available subnets within a specified range.'
  )

  parser.add_argument(
      '--base-range',
      type=str,
      required=True,
      help='Base CIDR range to find available subnets within.'
  )

  parser.add_argument(
      '--used-subnets',
      type=argparse.FileType('r'),
      help='File containing used subnets, one per line.'
  )

  parser.add_argument(
      '--required-sizes',
      type=int,
      nargs='+',
      required=True,
      help=
      'Required sizes of available subnets, specified as a list of subnet sizes (e.g., 28 27 27 23).'
  )

  return parser.parse_args()

#-----------------------------------------------------------------------------
def main():
  args = parseargs()

  base_range = args.base_range
  required_size = args.required_size
  required_sizes = args.required_sizes

  if args.used_subnets:
    existing_subnets = args.used_subnets.readlines()
  else:
    existing_subnets = []

  for required_size in required_sizes:
    available_subnets = find_available_subnets(
        base_range, existing_subnets, required_size
    )

  for subnet in available_subnets:
    print(subnet)

##############################################################################
#-----------------------------------------------------------------------------
if __name__ == '__main__':
  main()
