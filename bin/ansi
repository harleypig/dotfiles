#!/bin/bash

##############################################################################
# This script provides a versatile _ansi() function for generating ANSI escape
# sequences to format and color text in the terminal.
#
# The function is designed to work both in the PS1 prompt and for general
# display purposes. Two options, -sb and -n, allow users to choose the
# appropriate delimiters for the escape sequences, ensuring accurate character
# counting and proper formatting.

##############################################################################
# Resources:
#
# Peruse /usr/share/doc/xterm/*
#
# https://github.com/fidian/ansi has some good ideas, and some interesting
# things to try, but I don't like the way they're doing things. So I'll keep
# my own stuff for now.
#
# http://mywiki.wooledge.org/BashFAQ/037
# http://wiki.bash-hackers.org/scripting/terminalcodes
#
# Convert rgb (0-255 0-255 0-255) to 8-bit 0-255
# XXX: Figure out how to do hex

##############################################################################
DEBUG=

function debug() { ((DEBUG)) && echo "$*" >&2; }

#-----------------------------------------------------------------------------
function usage() {
  cat << EOF
Usage: ${0##*/} [-sb | -n] [cmd1] [cmd2] ...

Options:
  -sb    Use \\[ and \\] delimiters for PS1 prompts.
  -n     Use \\001 and \\002 delimiters for PROMPT_COMMAND or other cases
         requiring precise cursor control.
  (none) No delimiters are used for general display purposes.

Commands:
  fg [color]       Set foreground color. (See Colors below)
  bg [color]       Set background color. (See Colors below)
  off              Reset all attributes.
  bell             Emit a terminal bell.
  reverse          Swap foreground and background colors.
  italics_on       Enable italics.
  italics_off      Disable italics.
  stdout_on        Enable standout mode.
  stdout_off       Disable standout mode.
  underline_on     Enable underline.
  underline_off    Disable underline.

Colors:

  Pre-defined colors:
    black, red, green, yellow, blue, purple, cyan, white,
    bright_black, bright_red, bright_green, bright_yellow,
    bright_blue, bright_purple, bright_cyan, bright_white

  Hex colors (format: #RRGGBB):
    You can specify colors using hexadecimal notation. The hex value should be
    in the format #RRGGBB, where RR, GG, and BB are two-digit hexadecimal
    numbers representing the red, green, and blue components of the color,
    respectively.

Example usage:
  ${0##*/} -sb fg red bg black # Red foreground and black background for PS1 prompts
  ${0##*/} -n fg blue          # Blue text and reset attributes for PROMPT_COMMAND
  ${0##*/} fg green bg yellow  # Green text on yellow background for general display
  ${0##*/} fg #FF5733          # Sets the foreground color to a shade of orange.
  ${0##*/} bg #33FF57          # Sets the background color to a shade of green.

You can also use any other tput command as an argument. For example, you could
print the date and time in the upper right corner of the terminal window.

To find more tput commands, refer to the tput documentation with 'man tput'.

EOF

exit 0
}

#-----------------------------------------------------------------------------
# Convert hex color to rgb

hex_to_256() {
  hex_color="${1#\#}"
  ((r=16#${hex_color:0:2}, g=16#${hex_color:2:2}, b=16#${hex_color:4:2}))

#  if [[ $TERM == *256color* ]] || [[ $(tput colors) -eq 256 ]]; then
#    printf '%s' "$r;$g;$b"

#  else
    CF="6/256"
    eight_bit="$(bc <<< "scale=0; 16 + ($r * $CF) * 36 + ($g * $CF) * 6 + ($b * $CF)")"
    printf '%s' "$eight_bit"
#  fi
}

#-----------------------------------------------------------------------------
function _ansi() {
  [[ -t 1 ]] && return 0
  # convert convenience values to what tput understands

  local -A color

  color['black']=0
  color['red']=1
  color['green']=2
  color['yellow']=3
  color['blue']=4
  color['purple']=5
  color['cyan']=6
  color['white']=7
  color['bright_black']=8
  color['bright_red']=9
  color['bright_green']=10
  color['bright_yellow']=11
  color['bright_blue']=12
  color['bright_purple']=13
  color['bright_cyan']=14
  color['bright_white']=15

  # shellcheck disable=SC2034
  {
    local fg='setaf'
    local bg='setab'
  }

  local str
  local FIRST=''
  local LAST=''

  while [ $# -ge 1 ]; do
    cmd=$1
    shift

    local seq

    case $cmd in
      -sb)
        # Use '\\' as the delimiter for the escape sequence
        FIRST='\\['
        LAST='\\]'
        ;;

      -n)
        FIRST='\001'
        LAST='\002'
        ;;

      bell) seq=$(tput bel) ;;
      reverse | rev) seq=$(tput rev) ;;
      italics_on) seq=$(tput sitm) ;;
      italics_off) seq=$(tput ritm) ;;
      stdout_on) seq=$(tput smso) ;;
      stdout_off) seq=$(tput rmso) ;;
      underline_on) seq=$(tput smul) ;;
      underline_off) seq=$(tput rmul) ;;
      off) seq=$(tput sgr0) ;;

      fg | bg)
        # Set foreground or background color
        c=$1

        [[ $c =~ ^\# ]] && c="$(hex_to_256 "$c")"
        [[ -v color[$c] ]] && c=${color[$c]}

        seq=$(tput "${!cmd}" $c)
        shift
        ;;

      *) # Handle any other tput commands
        seq=$(tput "$cmd") ;;

    esac

    str+="$FIRST$seq$LAST"
  done

  printf '%s' "$str"
  return
}

##############################################################################
[[ "$*" =~ (^|[[:space:]])--?h(elp)?($|[[:space:]]) ]] && usage
(($#)) || usage

_ansi "$@"
