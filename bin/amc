#!/bin/bash

# See the command line page for filebot options reference
# http://www.filebot.net/cli.html
#
# See the forum thread about the amc script:
# https://www.filebot.net/forums/viewtopic.php?t=215

FILEBOT=$(which filebot)
PROGNAME=$(basename $0)

BASE_DIR='/home/harleypig/videos'
BASE_DEST_DIR='/home/media'

DATA_DIR="${BASE_DIR}/data"
LOGFILE="${BASE_DIR}/logs/${PROGNAME}_$(date +%Y%m%d-%H%M%S).log"
SCRIPTLOG="${LOGFILE}.err"

EXCLUDE_FILE="${DATA_DIR}/amc_exclude_file.list"
OPTIONS_FILE="${DATA_DIR}/amc.options"

OPTS="${OPTS} -script fn:amc"
#OPTS="${OPTS} -script fn:sysenv"

OPTS="${OPTS} --action move"
#OPTS="${OPTS} --action test"

OPTS="${OPTS} --output ${BASE_DEST_DIR}" # formats will be relative to this
OPTS="${OPTS} -r"
OPTS="${OPTS} -non-strict"

OPTS="${OPTS} --conflict auto"
#OPTS="${OPTS} --conflict fail"
#OPTS="${OPTS} --conflict index"
#OPTS="${OPTS} --conflict override"
#OPTS="${OPTS} --conflict skip"

#OPTS="${OPTS} --order absolute"
OPTS="${OPTS} --order airdate"
#OPTS="${OPTS} --order dvd"

OPTS="${OPTS} --log all"
#OPTS="${OPTS} --log off"

OPTS="${OPTS} --log-file $LOGFILE"

OPTS="${OPTS} --def excludeList=${EXCLUDE_FILE}"
OPTS="${OPTS} --def @${OPTIONS_FILE}"
OPTS="${OPTS} --def unsortedFormat=${BASE_DIR}/unsorted/{file.structurePathTail}"
#OPTS="${OPTS} --def minFileSize=41943040"
#OPTS="${OPTS} --def minFileSize=10000000"
OPTS="${OPTS} --def minFileSize=1000000"

$FILEBOT $OPTS "$@" > /dev/null 2> $SCRIPTLOG
#echo $FILEBOT $OPTS

# tv/Series_Name/Series_Name_S##/Series_Name_S##E##_airdate_Episode_Name.ext
#
# seriesFormat=tv/
# {n.replaceTrailingBrackets().replaceAll("'").space('_')}/
# {n.replaceTrailingBrackets().replaceAll("'").space('_')}_S{s.pad(2)}/
# {n.replaceTrailingBrackets().replaceAll("'").space('_')}_{s00e00}_{airdate.format('yyyyMMdd')}_{t.upperInitial().space('_')}

# movies/series/Series_Name/Movie_Name_year.ext
# movies/alpha/[A-Z]/Movie_Name_year.ext
#
# movieFormat=movies/
# {self.collection
#    ? concat('series/', collection.space('_'))
#    : concat( 'alpha/', n.sortName() =~ /^(?i)[a-z]/ ? n.sortName()[0].upperInitial() : '_')
# }/
# {n.ascii().upperInitial().space('_').replaceAll("'",'')}_{y}{'_CD'+pi}
#
# See https://www.filebot.net/forums/viewtopic.php?f=5&t=4041&p=22711&hilit=collection#p22648
# details:
#
# {
#    norm = {
#       it.colon(' - ')
#       .tr('*?|', ' !-')
#       .asciiQuotes()
#       .replaceAll(/\b(?i)[IVX]+\b/, { it.upper() })
#       .replaceAll(/\b[0-9](?i:st|nd|rd|th)\b/, { it.lower() })
#       .replaceAll(/(Collection) of the (.+)/, /$2 $1/)
#       .replaceAll(/(Saga) Collection/, /$1/)
#       .replaceAll(/^(?i)(The|A|An|Der|Die|Das) (.+)/, /$2, $1/)
#    };
#    path = allOf{ norm(collection) }{ norm(n) }.join('/');
#    path[0].replaceAll(/\W|\d/, '#') + '/' + path
# }{
#    norm(n) != norm(primaryTitle) ? ' (' + primaryTitle + ')' : null
# }{
#    fn =~ /3D|3-D/ ? ' 3D' : null
# } ({y})/{
#    allOf
#       {n.asciiQuotes().removeAll(/[,!]/)}
#       {fn =~ /3D|3-D/ ? '3D' : null}
#       {'(' + tags.join(', ') + ')'}
#       {y}{'Part'+pi}
#       {vf}{vc}{ac}{af}
#    .join('.').space('.')
# }

# Move files to the right places ...

remove_empty_dirs () {
  source_dir=$1

  FIND='/usr/bin/find'
  FIND_OPTS='-type d -empty -delete'

  $FIND $source_dir $FIND_OPTS

}

move_shows () {
  source_dir=$1
  target_dir=$2

  RSYNC='/usr/bin/rsync'
  RSYNC_OPTS='-aviHS --remove-source-files'

  for show in $(ls $target_dir) ; do
    if [ ! -e $source_dir/$show ]; then
      continue
    fi

    $RSYNC $RSYNC_OPTS $source_dir/$show/ $target_dir/$show/
  done

  remove_empty_dirs $source_dir

}

FIRST=/home/media/tv
WATCHING=/home/media/tv_watching
POPULAR=/home/media2/tv
PERMANENT=/home/media2/tv_permanent

move_shows $FIRST    $PERMANENT
move_shows $FIRST    $POPULAR
move_shows $FIRST    $WATCHING

move_shows $WATCHING $PERMANENT
move_shows $WATCHING $POPULAR

move_shows $POPULAR  $PERMANENT

remove_empty_dirs $PWD
