#!/bin/bash

##############################################################################
# Cleanup of a path variable (a string with values separated by colons).
#
# This script will remove duplicate paths and paths that don't exist. Cleanup
# will also reorder the values based on values in environment variables named
# SHOULD_BE_FIRST and SHOULD_BE_LAST, where the value is a colon separated
# list of paths in the order you want them to appear in the final output.
#
# There are also the SHOULD_BE_IGNORED and SHOULD_BE_STRIPPED environment
# variables. These are also colon separated string of paths. The order for
# these don't matter.
#
# SHOULD_BE_STRIPPED will remove the path from the final output. These values
# should be the same *as they appear in the original* because other entries
# may resolve to the same directory.
#
# SHOULD_BE_IGNORED will leave the path in it's original position in the final
# output. These values should be the same *as they appear in the original*.

#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }

die() {
  (($#)) && warn "$@"
  exit 1
}

debug() {
  ((DEBUG)) || return 0
  warn "$@"
}

#-----------------------------------------------------------------------------
get_real_dir() {
  local d=$1

  # What is the real path for $d?
  dir=$(readlink -ne "$d") || return 1

  # does $dir exist?
  [[ -z $dir ]] && return 1

  # is $dir a directory?
  [[ -d $dir ]] || return 1

  printf '%s' "$dir"
  return 0
}

#-----------------------------------------------------------------------------
# join with colon
# No, IFS=':' echo "$*" does not work.

jwc() {
  local IFS=':'
  echo "$*"
  return 0
}

#-----------------------------------------------------------------------------
build_path() {
  local path="${1?Must pass path}"

  declare -a PATHS PATH_NEW PATH_LAST
  declare -A PATH_CHECK

  IFS=':' read -ra PATHS <<< "${SHOULD_BE_FIRST}:${!path}:${SHOULD_BE_LAST}"

  for d in "${PATHS[@]}"; do
    debug "Checking $d ..."

    # Ignore blank entries
    [[ -z $d ]] && continue

    # Ignore dot
    [[ $d == '.' ]] && continue

    # Have we already handled this directory?
    [[ ${PATH_CHECK[$d]+isset} -ne 0 ]] && continue

    if [[ ${SHOULD_BE_IGNORED[$d]+isset} -ne 0 ]]; then
      PATH_NEW+=("$d")
      PATH_CHECK[$d]=1
      debug "IGNORE: $d"
      continue

    elif [[ ${SHOULD_BE_STRIPPED[$d]+isset} -ne 0 ]]; then
      PATH_CHECK[$dir]=1
      debug "STRIP: $d"
      continue
    fi

    # Get the real path, if it really exists.
    dir=$(get_real_dir "$d") || continue

    # Have we already handled this directory?
    [[ ${PATH_CHECK[$dir]+isset} -ne 0 ]] && continue

    if [[ ${SHOULD_BE_STRIPPED[$dir]+isset} -ne 0 ]]; then
      debug "STRIP: $dir"

    elif [[ ${SHOULD_BE_FIRST[$dir]+isset} -ne 0 ]]; then
      PATH_FIRST+=("$dir")
      debug "FIRST: $dir"

    elif [[ ${SHOULD_BE_LAST[$dir]+isset} -ne 0 ]]; then
      PATH_LAST+=("$dir")
      debug "LAST: $dir"

    else
      PATH_NEW+=("$dir")
      debug "DIR: $dir"
    fi

    PATH_CHECK[$dir]=1
  done

  jwc "${PATH_FIRST[@]}" "${PATH_NEW[@]}" "${PATH_LAST[@]}"

  return 0
}

#-----------------------------------------------------------------------------
[[ -z $1 ]] && die "No environment variable name passed as parameter."
[[ -z ${!1} ]] && die "Environment variable '$1' does not exist."

#-----------------------------------------------------------------------------
# Cleanup passed variable
debug "Cleaning $1 ..."

NEWVAR=$(build_path "$1")
printf '%s' "$NEWVAR"

#-----------------------------------------------------------------------------
# Don't clutter the environment in case we are being sourced.

unset -f get_real_dir jwc build_path debug addpath
unset NEWPATH NEWLDPATH SHOULD_BE_FIRST SHOULD_BE_LAST
unset SHOULD_BE_IGNORED SHOULD_BE_STRIPPED f
