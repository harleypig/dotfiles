#!/bin/bash

# XXX: Add STASHed info (check logs/refs/stash for count and other info)

# Most of this git functionality came from
# https://gist.github.com/623142

# If you want/need multiple repository checking,
# have a look at http://glandium.org/blog/?p=170

command -v git &> /dev/null || exit 0

# Are we in a git repo?
git rev-parse &> /dev/null || exit 0

# Are we in a bare repo?
[[ $(git rev-parse --is-bare-repository) == 'true' ]] && exit 0

# Do we have access to __git_ps1?
declare -a locs

# https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
locs+=("$DOTFILES/lib/git-prompt")
locs+=('/usr/share/git-core/contrib/completion/git-prompt.sh')
locs+=('/usr/share/git/completion/git-prompt.sh')
locs+=('/usr/lib/git-core/git-sh-prompt')

locfound=0

for loc in "${locs[@]}"; do
  [[ -r $loc ]] && {
    source "$loc"
    locfound=1
    break
  }
done

((locfound)) || exit 0

# shellcheck disable=SC2034
{
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWSTASHSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWUPSTREAM="auto"
  #GIT_PS1_SHOWCONFLICTSTATE="yes"
  #GIT_PS1_HIDE_IF_PWD_IGNORED=1
}

info=$(__git_ps1 '%s')

# shellcheck disable=SC1117
if [ -n "$info" ]; then
  git_normal_color=$(ansi fg green)
  git_unstaged_color=$(ansi fg yellow)
  git_staged_color=$(ansi fg red)
  git_push_color=$(ansi bg red fg yellow)
  git_pull_color=$(ansi bg red fg yellow)
  color_off=$(ansi off)

  git_pull_text='PULL'
  git_push_text='PUSH'

  branch=$(echo "$info" | perl -ane '$F[0]=~s/[<>=]$//;print $F[0]')
  unstaged=$(echo "$info" | perl -ane 'print $F[1]=~/\*/')
  staged=$(echo "$info" | perl -ane 'print $F[1]=~/\+/')
  #stashed=$(echo "$info" | perl -ane 'print $F[1]=~/\$/')
  #untracked=$(echo "$info" | perl -ane 'print $F[1]=~/\%/')
  behind=$(echo "$info" | perl -ane 'print $F[1]=~/\</ || $F[0]=~/\<$/')
  ahead=$(echo "$info" | perl -ane 'print $F[1]=~/\>/ || $F[0]=~/\>$/')

  status_color="$git_normal_color"
  if [ -n "$unstaged" ]; then status_color="$git_unstaged_color"; fi
  if [ -n "$staged" ]; then status_color="$git_staged_color"; fi

  upstream=
  if [ -n "$behind" ]; then upstream=" $git_pull_color$git_pull_text$color_off"; fi
  if [[ ! -f .nopush && -n $ahead ]]; then upstream=" $git_push_color$git_push_text$color_off"; fi

  repo="$(basename "$(git rev-parse --show-toplevel)"): "

  printf ' %s(%s%s%s)%s' "$status_color" "$repo" "$branch" "$upstream" "$color_off"
fi
