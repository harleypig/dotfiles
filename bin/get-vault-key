#!/bin/bash

##############################################################################
# Functions
#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() { (($#)) && warn "$@"; exit 1; }

#-----------------------------------------------------------------------------
usage() {
  local usage_text
  usage_text=$(cat <<EOT
Usage: ${0##*/} list|get pathname [keyname]

  list pathname    - List all keys in the specified vault path
  get pathname key - Get the value of the specified key and return it as JSON

  pathname can be a partial path. If multiple matches are found,
  you will be prompted to select one.

  The 'get' command returns a JSON object containing:
    - The requested key's value
    - The vault path where the key was found

  Example:
    $ ${0##*/} get dai/gcp/project api-key
    {
      "api-key": "abcdef123456",
      "path": "dai/gcp/project"
    }
EOT
)

  # If message provided, append it to usage text
  (($#)) && usage_text+=$'\n\n'"$*"$'\n\n'

  die "$usage_text"
}

##############################################################################
# Setup and Sanity
#-----------------------------------------------------------------------------
# Check if vault token is set, if not try to source set-vault-token
if [[ -z $VAULT_TOKEN ]]; then
  warn "Vault token not set. Attempting to set it now..."
  warn "In the future, run 'source set-vault-token' in your session to avoid this message."

  source set-vault-token 2>/dev/null \
    || die "Failed to set vault token. Please run 'source set-vault-token' manually."

  [[ -z $VAULT_TOKEN ]] && die "Vault token still not set after running set-vault-token."

  warn "Vault token successfully set."
fi

#-----------------------------------------------------------------------------
# Parameter handling
command="$1"

# Validate command is either 'list' or 'get'
case "$command" in
  list|get) ;;
  *) usage "Error: Command must be 'list' or 'get'" ;;
esac

pathname="$2"
keyname="$3"

[[ "$command" == "get" && -z "$keyname" ]] \
  || usage "Error: Key name is required for 'get' command"

#-----------------------------------------------------------------------------
# Find matching paths
declare vaultpaths="$XDG_CACHE_HOME/vault-paths"
declare -a matches

[[ -f "$vaultpaths" ]] \
  || die "Error: Vault paths file ($vaultpaths) not found. Run 'discover-vault-paths' first."

readarray -t matches < <(grep -i "$pathname" "$vaultpaths")

[[ ${#matches[@]} -eq 0 ]] \
  && die "Error: No matching paths found for '$pathname'"

#-----------------------------------------------------------------------------
# If multiple matches, let user select one
declare selected_path="${matches[0]}"

if [[ ${#matches[@]} -gt 1 ]]; then
  echo "Multiple matching paths found:"
  PS3="Select a path (0 to cancel): "

  select path in "${matches[@]}" "Cancel"; do
    if [[ "$REPLY" == "0" || "$path" == "Cancel" ]]; then
      die "Operation cancelled by user"

    elif [[ -n "$path" ]]; then
      selected_path="$path"
      break
    fi
  done
fi

#-----------------------------------------------------------------------------
# Execute the command
if [[ "$command" == "list" ]]; then
  echo "Listing keys in $selected_path:"
  vault read -format=json "$selected_path" | jq -Sr '.data | keys[]'

elif [[ "$command" == "get" ]]; then
  vault read -format=json "$selected_path" | jq -Sr "{
    \"$keyname\": .data[\"$keyname\"],
    \"path\": \"$selected_path\"
  }"
fi
