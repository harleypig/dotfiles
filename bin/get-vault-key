#!/bin/bash

##############################################################################
# Functions
#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() { (($#)) && warn "$@"; exit 1; }

#-----------------------------------------------------------------------------
usage() {
  local usage_text
  usage_text=$(cat <<EOT
Usage: ${0##*/} list|get pathname [keyname]

  list pathname    - List all keys in the specified vault path
  get pathname key - Get the value of the specified key from the vault path

  pathname can be a partial path. If multiple matches are found,
  you will be prompted to select one.
EOT
)

  # If message provided, append it to usage text
  (($#)) && usage_text+=$'\n\n'"$*"$'\n\n'

  die "$usage_text"
}

##############################################################################
# Setup and Sanity
#-----------------------------------------------------------------------------
[[ -n $VAULT_TOKEN ]] \
  || die "Vault token is not set. Set that by running the following command
and entering your LDAP password:

source set-vault-token"

#-----------------------------------------------------------------------------
# Parameter handling
command="$1"

# Validate command is either 'list' or 'get'
case "$command" in
  list|get) ;;
  *) usage "Error: Command must be 'list' or 'get'" ;;
esac

pathname="$2"
keyname="$3"

if [[ "$command" == "get" && -z "$keyname" ]]; then
  usage "Error: Key name is required for 'get' command"
fi

#-----------------------------------------------------------------------------
# Find matching paths
declare vaultpaths="$XDG_CACHE_HOME/vault-paths"
declare -a matches

[[ ! -f "$vaultpaths" ]] \
  || die "Error: Vault paths file ($vaultpaths) not found. Run 'discover-vault-paths' first."

readarray -t matches < <(grep -i "$pathname" "$vaultpaths")

[[ ${#matches[@]} -eq 0 ]] \
  || die "Error: No matching paths found for '$pathname'"

#-----------------------------------------------------------------------------
# If multiple matches, let user select one
declare selected_path="${matches[0]}"

if [[ ${#matches[@]} -gt 1 ]]; then
  echo "Multiple matching paths found:"
  PS3="Select a path (0 to cancel): "

  select path in "${matches[@]}" "Cancel"; do
    if [[ "$REPLY" == "0" || "$path" == "Cancel" ]]; then
      die "Operation cancelled by user"

    elif [[ -n "$path" ]]; then
      selected_path="$path"
      break
    fi
  done
fi

#-----------------------------------------------------------------------------
# Execute the command
if [[ "$command" == "list" ]]; then
  echo "Listing keys in $selected_path:"
  vault list "$selected_path"
elif [[ "$command" == "get" ]]; then
  echo "Getting value of '$keyname' from $selected_path:"
  vault read -format=json "$selected_path" | jq -r ".data[\"$keyname\"]"
fi
