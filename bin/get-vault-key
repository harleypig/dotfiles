#!/bin/bash

##############################################################################
# Functions
#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() { (($#)) && warn "$@"; exit 1; }

#-----------------------------------------------------------------------------
usage() {
  local usage_text
  usage_text=$(cat <<EOT
Usage: ${0##*/} list|get pathname [keyname]

  list pathname    - List all keys in the specified vault path
  get pathname key - Get the value of the specified key from the vault path

  pathname can be a partial path. If multiple matches are found,
  you will be prompted to select one.
EOT
)

  # If message provided, append it to usage text
  [[ -n "$*" ]] && usage_text+=$'\n\n'"$*"
  
  # Use die function to display message and exit
  die "$usage_text"
}

##############################################################################
# Setup and Sanity
#-----------------------------------------------------------------------------
[[ -n $VAULT_TOKEN ]] || {
  cat <<EOT
Vault token is not set. Set that by running the following command
and entering your LDAP password:

source set-vault-token
EOT

  exit 1
}

#-----------------------------------------------------------------------------
# Parameter handling
[[ $# -lt 2 ]] && usage "Error: Not enough arguments"

command="$1"

# Validate command is either 'list' or 'get'
case "$command" in
  list|get) ;;
  *)
    usage "Error: Command must be 'list' or 'get'"
    ;;
esac

pathname="$2"
keyname="$3"

if [[ "$command" == "get" && -z "$keyname" ]]; then
  usage "Error: Key name is required for 'get' command"
fi

pathname="$2"
keyname="$3"

#-----------------------------------------------------------------------------
# Find matching paths
declare vaultpaths="$XDG_CACHE_HOME/vault-paths"
declare -a matches

if [[ ! -f "$vaultpaths" ]]; then
  die "Error: Vault paths file not found. Run 'discover-vault-paths' first."
fi

readarray -t matches < <(grep -i "$pathname" "$vaultpaths")

if [[ ${#matches[@]} -eq 0 ]]; then
  die "Error: No matching paths found for '$pathname'"
fi

#-----------------------------------------------------------------------------
# If multiple matches, let user select one
selected_path=""
if [[ ${#matches[@]} -eq 1 ]]; then
  selected_path="${matches[0]}"
else
  echo "Multiple matching paths found:"
  PS3="Select a path: "
  select path in "${matches[@]}"; do
    if [[ -n "$path" ]]; then
      selected_path="$path"
      break
    fi
  done
fi

#-----------------------------------------------------------------------------
# Execute the command
if [[ "$command" == "list" ]]; then
  echo "Listing keys in $selected_path:"
  vault list "$selected_path"
elif [[ "$command" == "get" ]]; then
  echo "Getting value of '$keyname' from $selected_path:"
  vault read -format=json "$selected_path" | jq -r ".data[\"$keyname\"]"
fi
