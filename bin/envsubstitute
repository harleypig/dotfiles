#!/bin/bash

# This script is a custom implementation of the envsubst utility, designed to
# replace placeholders in a given string with the corresponding environment
# variable values. It takes a string as input and searches for occurrences of
# placeholders in the format $WORD, ${WORD}, or %WORD%. The script then
# replaces these placeholders with the respective environment variable values
# if they exist. If a variable is not found in the environment and NO_WARN is
# not set, the script replaces the placeholder with a warning message,
# indicating that the variable does not exist. If NO_WARN is set, the script
# leaves the unknown variable placeholders untouched.
#
# The key difference between this custom implementation and the standard
# envsubst utility is the support for an additional placeholder format,
# %WORD%. By default, this script uses the $WORD or ${WORD} format for
# placeholders, but if the SUBST_DELIM variable is set, the script switches to
# using the %WORD% format. This flexibility allows the user to choose their
# preferred placeholder format, making it more adaptable to different use
# cases.
#
# There is no support for envsubst's SHELL-FORMATS option. If you want unknown
# variables to be replaced with an empty string, you can set the NO_WARN
# variable to a non-empty value before calling this script. When NO_WARN is
# set, it leaves unknown variable placeholders in the string, instead of
# replacing them with a warning message.

##############################################################################
#-----------------------------------------------------------------------------

# Determine whether we are being sourced or executed.
NOT_SOURCED=0
[[ ${BASH_SOURCE[0]} == "$0" ]] && NOT_SOURCED=1

declare selfname

# Set the appropriate return command.
if ((NOT_SOURCED)); then
  selfname="${0##*/}"
  RETURN='exit'
else
  selfname="envsubstitute"
  RETURN='return'
fi

#source debug

#-----------------------------------------------------------------------------
warn() {
  [[ -n $NO_WARN ]] && return 0
  printf '%s\n' "$@" >&2
}

#-----------------------------------------------------------------------------
die() {
  (($#)) && warn "$@"
  exit 1
}

#-----------------------------------------------------------------------------
usage() {
  warn "

Usage: $selfname 'input_string'
       echo 'input_string' | $selfname

$selfname processes the given input string, replacing variable placeholders
with their corresponding environment variable values, and prints the result to
STDOUT.

Placeholders can be in one of the following formats:
  - \$WORD or \${WORD} (default)
  - %WORD% (if SUBST_DELIM is set)

Options:
  - SUBST_DELIM: Set a single character to change the delimiter, e.g., '%'.
  - NO_WARN: Set this variable to disable warnings and leave unknown variables untouched.

Example:
  PRJNAME=test123 $selfname '/path/to/\$PRJNAME/'
  PRJNAME=test123 echo '/path/to/\$PRJNAME/' | $selfname

  In both cases the output would be '/path/to/test123'.

" "$@"
}

##############################################################################
#-----------------------------------------------------------------------------

# Check for help flags first, before processing input
for arg in "$@"; do
  case "$arg" in
    -h|--help)
      usage
      $RETURN 0
      ;;
  esac
done

_envsubst() {
  local s match regex skiptext skipvar value varname
  local -i rc

  skiptext='--SKIP--'

  # Check for help in the function too, in case it's called directly
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    usage
    return 0
  fi

  if [[ -z $1 ]]; then
    # Read from STDIN.
    s=$(cat -)
  else
    s="$*"
  fi

  #---------------------------------------------------------------------------
  if [[ -n $SUBST_DELIM ]]; then
    regex="${SUBST_DELIM}([^\\$SUBST_DELIM]*)$SUBST_DELIM"
  else
    regex='\$\{([a-zA-Z_]+)\}|\$([a-zA-Z_]+)'
  fi

  #---------------------------------------------------------------------------
  [[ $s =~ $regex ]] || {
    rc=$?

    ((rc == 1)) && {
      warn "No %WORD%'s found in string '%s'."
      printf '%s' "$s"
      return $rc
    }

    # Force warning on real problems.
    ((rc => 2)) && unset NO_WARN
    ((rc == 2)) && die "Syntax error in $selfname's regex."
    ((rc > 2)) && die "Unknown error from =~ in $selfname."
  }

  #---------------------------------------------------------------------------
  while [[ $s =~ $regex ]]; do
    match="${BASH_REMATCH[0]}"

    if [[ -n ${BASH_REMATCH[1]} ]]; then
      # Match '${WORD}' or '%WORD%'
      varname="${BASH_REMATCH[1]}"
      value="$match"

    else
      # Match '$WORD'
      varname="${BASH_REMATCH[2]}"
      value="\${$varname}"
    fi

    if [[ -v $varname ]]; then
      value="${!varname}"

    elif [[ -z $NO_WARN ]]; then
      warn "Variable '$varname' does not exist in the environment"
      value="${value%?}: NOT FOUND${value: -1}"

    else
      value="${skiptext}${match:1}"
    fi

    s=${s//$match/$value}
  done

  skipvar='$'
  [[ -n $SUBST_DELIM ]] && skipvar="$SUBST_DELIM"
  s="${s//$skiptext/$skipvar}"

  printf '%s' "$s"
}

((NOT_SOURCED)) \
  && _envsubst "$@" \
  && $RETURN $?
