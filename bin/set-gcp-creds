#!/bin/bash

##############################################################################
# Functions
#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() { (($#)) && warn "$@"; exit 1; }

#-----------------------------------------------------------------------------
usage() {
  local usage_text
  usage_text=$(cat <<EOT
Usage: ${0##*/}
EOT
)

  # If message provided, append it to usage text
  (($#)) && usage_text+=$'\n\n'"$*"$'\n\n'

  die "$usage_text"
}

##############################################################################
# Setup and Sanity
#-----------------------------------------------------------------------------
[[ -n $VAULT_TOKEN ]] \
  || die "Vault token is not set. Set that by running the following command
and entering your LDAP password:

source set-vault-token"

#-----------------------------------------------------------------------------
# AI!
# If a parameter is passed, then use that for get-vault-key,
# then if azure-pipelines.yml exists in the current directory then
# grep azure-pipelines.yml in the current directory as described below.
#
# search for 'tfServiceConnectionName:' in azure-pipelines.yml and put the
# results in an array
#   * do as much as possible in the subshell
#   * remove everything past the first hash '#'
#   * only need the value ... the right side of the colon
#   * remove all whitespace
#   * remove prefix (sandbox|zions)-cloud-(dev|test)?-
#   * remove empty elements
#
# if there are more than one elements, then prompt the user to select one
#
# get-vault-key get <name> creds.json | base64 -d | jq -rS '.' > $credsfile

declare scname scpath

if [[ -n $1 ]]; then
  scpath="$(grep "$1" "$vaultpaths")"
  credsfile="$credspath/$scpath.json"

else
  scname="$(grep -ri "^[^#]*tfServiceConnectionName:[[:space:]]*[\"']sandbox" azure-pipelines.yml \
    | cut -d ':' -f 2 | tr -d '[:space:]"'\''')"

  scname="${scname#sandbox-cloud-}"

  scpath="$(grep "$scname" "$vaultpaths")"
  credsfile="$credspath/sandbox-$scname.json"
fi

#-----------------------------------------------------------------------------
vault read -format=json "$scpath" \
  | jq -r '.data["creds.json"]' \
  | base64 -d \
  | jq -S '.' > "$credsfile"

export GOOGLE_APPLICATION_CREDENTIALS="$credsfile"
