#!/bin/bash

##############################################################################
# Setup and Sanity

lin="$(command -v linode-cli &> /dev/null)"
[[ -z $lin ]] && {
  echo "linode-cli is required for this script"
  exit 1
}

[[ -z $LINODE_CLI_TOKEN ]] && {
  echo "LINODE_CLI_TOKEN must be set for this script"
  exit 1
}

declare -i DEBUG=0 DRYRUN=0 SHOWINFO=0
declare -A linodes volumes
declare current_ip default_linode default_volume

current_ip="$( ip addr show \
  | grep -oP '(?<=inet\s)\d+(\.\d+){3}' \
  | grep -v '127.0.0.1' \
  | head -n 1)"

echo "Current IP: $current_ip"

echo "NOT READY!"
exit 1

##############################################################################
# Functions
#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() { (($#)) && warn "$@"; exit 1; }
debug() { ((DEBUG)) && warn "$@"; }

#-----------------------------------------------------------------------------
get_linodes() {
  local raw
  readarray -t raw < <($lin linodes list --format id,label,ipv4 --text --no-headers)

  [[ ${#raw[@]} -eq 0 ]] \
    && die "No linodes found. Does the token have the necessary permissions?"

  for line in "${raw[@]}"; do
    read -r lid label ipv4 <<< "$line"
    linodes["$label"]="$lid"
    debug "Added linode: Label=$label, ID=${linodes[$label]}"

    if [[ "$ipv4" == *"$current_ip"* ]]; then
      default_linode="$label"
      debug "Current linode found: $label"
    fi
  done
}

#-----------------------------------------------------------------------------
get_volumes() {
  local raw
  readarray -t raw < <($lin volumes list --format id,label,linode_label --text --no-headers)

  [[ ${#raw[@]} -eq 0 ]] \
    && die "No volumes found. Does the token have the necessary permissions?"

  for line in "${raw[@]}"; do
    read -r vid label linode_label <<< "$line"

    [[ -n "$linode_label" ]] && vid="$vid,$linode_label"

    volumes["$label"]="$vid"
    debug "Added volume: Label=$label, ID=${linodes[$label]}"

    if [[ ${#raw[@]} -eq 1 ]]; then
      default_volume="$label"
      debug "Default volume: $label"
    fi
  done
}

#-----------------------------------------------------------------------------
setup() {
  get_linodes
  get_volumes

  # XXX: Maybe use column -t for output?
  if ((SHOWINFO)); then
    echo "Linodes:"
    printf "%-20s %-10s\n" "Label" "ID"
    for label in "${!linodes[@]}"; do
      printf "%-20s %-10s\n" "$label" "${linodes[$label]}"
    done

    echo -e "\nVolumes:"
    printf "%-20s %-10s %-20s\n" "Label" "ID" "Attached To"
    for label in "${!volumes[@]}"; do
      IFS=',' read -r vid attached <<< "${volumes[$label]}"
      printf "%-20s %-10s %-20s\n" "$label" "$vid" "${attached:-Not Attached}"
    done
  fi
}

#-----------------------------------------------------------------------------
attach_volume() {
  local llabel="$1"
  local vlabel="$2"

  [[ -z "$llabel" ]] \
    && die "Linode label is required"

  [[ ! -v linodes["$llabel"] ]] \
    && die "Linode label '$llabel' not found"

  [[ -z "$vlabel" ]] \
    && die "Volume label is required"

  [[ ! -v volumes["$vlabel"] ]] \
    && die "Volume label '$vlabel' not found"

  local vinfo="${volumes[$vlabel]}"
  IFS=',' read -r vid attached <<< "$vinfo"

  [[ -n "$attached" ]] && {
    if [[ "$attached" == "$default_linode" ]]; then
      die "Volume '$vlabel' is attached to this linode"
    else
      die "Volume '$vlabel' is attached to '$attached'"
    fi
  }

  debug "$lin volumes attach $vid --linode_id ${linodes[$llabel]}"
  ((DRYRUN)) && return 0

  # Prompt for confirmation to attach volume to linode
  read -p "Are you sure you want to attach volume '$vlabel' to '$llabel'? (y/n): " confirm
  [[ "$confirm" != [yY] ]] && die "Volume attachment cancelled"

  $lin volumes attach "$vid" --linode_id "${linodes[$llabel]}" \
    || die "Problem attaching volume '$vlabel' to '$llabel'"

  echo "Volume '$vlabel' has been attached to '$llabel'"
}

#-----------------------------------------------------------------------------
detach_volume() {
  local vlabel="$1"

  [[ -z "$vlabel" ]] && die "Volume label is required"
  [[ ! -v volumes["$vlabel"] ]] && die "Volume label '$vlabel' not found"

  local vinfo="${volumes[$vlabel]}"
  IFS=',' read -r vid attached <<< "$vinfo"

  [[ -z "$attached" ]] \
    && die "Volume '$vlabel' is not attached to any Linode"

  if [[ "$attached" == "$default_linode" ]]; then
    if mount | grep -q "/dev/disk/by-id/scsi-0linode_Volume_$vlabel"; then
      unmount_volume "$vlabel"
    fi

  else
    warn "Volume '$vlabel' is attached to '$attached'. Cannot detect if it's mounted on a remote Linode. Detaching while mounted can cause data loss."
  fi

  read -p "Are you sure you want to detach volume '$vlabel' from '$attached'? (y/n): " confirm
  [[ "$confirm" != [yY] ]] && die "Volume detachment cancelled"

  debug "$lin volumes detach $vid"
  ((DRYRUN)) && return 0

  $lin volumes detach "$vid" \
    || die "Problem detaching volume '$vlabel' from '$attached'"

  echo "Volume '$vlabel' has been detached from '$attached'"
}

#-----------------------------------------------------------------------------
mount_volume() {
  local vlabel="$1"
  local mount_point="$2"

  [[ -z "$vlabel" ]] && die "Volume label is required"
  [[ ! -v volumes["$vlabel"] ]] && die "Volume label '$vlabel' not found"

  local vinfo="${volumes[$vlabel]}"
  IFS=',' read -r vid attached <<< "$vinfo"

  [[ -z "$attached" ]] \
    && die "Volume '$vlabel' is not attached to this Linode"

  [[ "$attached" != "$default_linode" ]] \
    && die "Volume '$vlabel' is not attached to this Linode"

  local device_path="/dev/disk/by-id/scsi-0linode_Volume_$vlabel"
  [[ ! -e "$device_path" ]] && die "Volume '$vlabel' device not found"

  if ! blkid "$device_path" &> /dev/null; then
    die "Volume '$vlabel' does not have a filesystem. Please create one first."
  fi

  local mount_dir="/mnt/${mount_point:-$vlabel}"
  warn "sudo will ask for your password to mount the volume."

  debug "sudo mount $device_path $mount_dir"
  ((DRYRUN)) && return 0

  sudo mkdir -p "$mount_dir"
  sudo mount -o rw,dmask=022,fmask=133 "$device_path" "$mount_dir" \
    || die "Problem mounting volume '$vlabel' to '$mount_dir'"

  sudo chmod -R 777 "$mount_dir"

  echo "Volume '$vlabel' has been mounted to '$mount_dir' with read/write permissions for all users"
}

#-----------------------------------------------------------------------------
unmount_volume() {
  local vlabel="$1"

  [[ -z "$vlabel" ]] && die "Volume label is required"
  [[ ! -v volumes["$vlabel"] ]] && die "Volume label '$vlabel' not found"

  local device_path="/dev/disk/by-id/scsi-0Linode_Volume_$vlabel"
  [[ ! -e "$device_path" ]] && die "Volume '$vlabel' device not found"

  local mount_dir=$(findmnt -n -o TARGET -S "$device_path")
  [[ -z "$mount_dir" ]] && die "Volume '$vlabel' is not mounted"

  if ! mount | grep -q "$mount_dir"; then
    die "Volume '$vlabel' is not mounted"
  fi

  warn "sudo will ask for your password to unmount the volume."

  debug "sudo umount $mount_dir"
  ((DRYRUN)) && return 0

  sudo umount "$mount_dir" \
    || die "Problem unmounting volume '$vlabel' from '$mount_dir'"

  echo "Volume '$vlabel' has been unmounted from '$mount_dir'"
}

##############################################################################

# Make the filesystem
# Only once!
#mkfs.ext4 "/dev/disk/by-id/scsi-0linode_Volume_migratory"

#mkdir /mnt/migratory
#mount "/dev/disk/by-id/scsi-0linode_Volume_migratory" "/mnt/migratory"

