#!/bin/bash

##############################################################################
# Functions
#-----------------------------------------------------------------------------
warn() { printf '%s\n' "$@" >&2; }
die() { (($#)) && warn "$@"; exit 1; }

#-----------------------------------------------------------------------------
usage() {
  local usage_text
  usage_text=$(cat <<EOT
Usage: ${0##*/} [options]

  Discovers and caches all vault paths for later use by other scripts.
  Paths are saved to ${XDG_CACHE_HOME:-$HOME/.cache}/vault-paths

  --help, -h Show this help
EOT
)

  # If message provided, append it to usage text
  (($#)) && usage_text+=$'\n\n'"$*"$'\n\n'

  die "$usage_text"
}

##############################################################################
# Setup and Sanity
#-----------------------------------------------------------------------------
# Check if vault token is set, if not try to source set-vault-token
if [[ -z $VAULT_TOKEN ]]; then
  warn "Vault token not set. Attempting to set it now..."
  warn "In the future, run 'source set-vault-token' in your session to avoid this message."

  source set-vault-token 2>/dev/null \
    || die "Failed to set vault token. Please run 'source set-vault-token' manually."

  [[ -z $VAULT_TOKEN ]] && die "Vault token still not set after running set-vault-token."

  warn "Vault token successfully set."
fi

#-----------------------------------------------------------------------------
declare vaultpaths="${XDG_CACHE_HOME:-$HOME/.cache}/vault-paths"
declare -a paths

#-----------------------------------------------------------------------------
get_secrets() {
  local path="$1"
  local -a work

  printf '%s%s%s%s\r' "$(ansi sc)" "$(ansi el)" "Looking $path ...           "
  readarray -t work < <(vault list -format="yaml" "$path")

  work=("${work[@]/#- /}")

  for p in "${work[@]}"; do
    newpath="$path$p"

    # The space in ": -1" is required
    if [[ ${p: -1} == '/' ]]; then
      get_secrets "$newpath"
    else
      paths+=("$newpath")
    fi
  done

  sleep .5
}

#-----------------------------------------------------------------------------
# Add check here for -h or --help and show usage, AI!
for p in dai/ dao/; do
  get_secrets "$p"
done

printf '%s\n' "${paths[@]}" > "$vaultpaths"
printf '\nVault paths saved to %s\n' "$vaultpaths"
