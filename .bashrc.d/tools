#!/bin/bash

[[ $- == *i* ]] || return 0

##################
# https://codereview.stackexchange.com/questions/187439/using-extdebug-to-display-where-a-function-was-defined

#function where() {
#  while (($# > 0)); do
#    cmd="$1"
#    info=$(type "$cmd")
#
#    case $info in
#      *function*)
#        shopt -s extdebug
#        declare -F "$cmd"
#        shopt -u extdebug
#        ;;
#      *) echo "$info" ;;
#    esac
#    shift
#  done
#}

##################
# http://www.commandlinefu.com/commands/view/7156/monitor-a-file-with-tail-with-timestamps-added

function tailfile() { tail -f "$1" | xargs -IX printf "$(date -u)\\t%s\\n" X; }

##################
# XXX: Add a way to handle lang option (see http://sprunge.us)

function pastebinit() { "$@" | curl -F 'sprunge=<-' http://sprunge.us; }

##################

function down4me() { curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'; }

##################

function geoip() {

  wget -qO - "www.ip2location.com/$1" \
    | grep -E '<span id=\"dgLookup__ctl2_lblI(Country|Region|City)\">' \
    | sed 's/<[^>]*>//g; s/^[\t]*//; s/&quot;/"/g; s/</</g; s/>/>/g; s/&amp;/\&/g'

}

##################

function man2epub() {

  name=$1

  if command -v pandoc >/dev/null; then
    zcat "$(man -w "$name")" | man2html -r - | pandoc -f html -o "$name.epub"
  else
    echo man2epub needs pandoc
  fi

}

##################
# Get an ordered list of subdirectory sizes
# http://www.shell-fu.org/lister.php?id=275

function dusk() {

  du -sk ./* | sort -n | awk 'BEGIN{ pref[1]="K"; pref[2]="M"; pref[3]="G";} { total = total + $1; x = $1; y = 1; while( x > 1024 ) { x = (x + 1023)/1024; y++; } printf("%g%s\t%s\n",int(x*10)/10,pref[y],$2); } END { y = 1; while( total > 1024 ) { total = (total + 1023)/1024; y++; } printf("Total: %g%s\n",int(total*10)/10,pref[y]); }'

}

##################
# http://vimeo.com/21538711 about 16:30

function toggle_trace() {

  if TRACEON eq 1; then
    export PS4
    export TRACEON
    set +o xtrace
  else
    export PS4='+[${BASH_SOURCE}] : ${LINENO} : ${FUNCNAME[0]:+${FUNCNAME[0]}() $ }'
    export TRACEON=1
    set -o xtrace
  fi

}

#####################
# screen and tmux both recognize this
# http://stackoverflow.com/questions/1687642/set-screen-title-from-shellscript/1687710#1687710

# shellcheck disable=SC1003
function set_title() { printf '\ek%s\e\\' "$1"; }
export -f set_title

#-----------------------------------------------------------------------
# Some of these are found on (and modified to fit):

# superuser.com
# commandlinefu.com

# Change to directory and list it
# shellcheck disable=SC2164
function cdl() {
  cd "$1"
  l
}

export -f cdl

# Make directory and cd to it
# shellcheck disable=SC2164
function mkcd() { mkdir -p -- "$@" && cd "$_"; }
export -f mkcd

######################################################################################
# I don't remember where I found this. This allows for arbitrary sized arrays
# and delimiters.

## Example:
##   join_array <delimiter> "${ARRAY[@]}"
##   joined=$(join_array <delimiter> "${ARRAY[@]}"
#
#function join_array() {
#  local delim=$1
#  shift
#  printf '%s' "$1"
#  shift
#  printf '%s' "${@/#/$delim}"
#}

# SOMEARRAY=('one' 'two' 'three')
# SOMEVAR=$(join_array : 'SOMEARRAY')     => one:two:three
# SOMEVAR=$(join_array ' : ' 'SOMEARRAY') => one : two : three

function join_array() {
  local delim=$1
  shift

  [[ $1 == '__array__' ]] && {
    echo "Don't use var name __array__ for your array, that's what join_array is using." >&2
    return 1
  }

  local -a __array__
  eval "__array__=(\"\${$1[@]}\")"

  first="${__array__[0]}"
  rest=("${__array__[@]:1}")

  printf '%s' "$first"
  printf '%s' "${rest[@]/#/$delim}"
}

export -f join_array

# if __is_array_empty "${ARRAY[@]}"; then do stuff for empty array; fi
function __is_array_empty() {
  [[ ${#@} -ne 0 ]] && return 1
  return 0
}

export -f __is_array_empty

# See http://www.fvue.nl/wiki/Bash:_Check_if_array_element_exists

######################################################################################

function duration() {

  local ddate="$1"

  local seconds
  seconds=$(date --date="$ddate" +%s)

  local now
  now=$(date +%s)

  local duration=$((now - seconds))

  local days=$((duration / (60 * 60 * 24)))
  local hours=$((duration % (60 * 60 * 24) / (60 * 60)))
  local minutes=$((duration % (60 * 60) / 60))

  local string

  [[ $days -ne 0 ]] && string="$string${days}d "
  [[ $hours -ne 0 ]] && string="$string${hours}h "
  [[ $minutes -ne 0 ]] && string="$string${minutes}m"

  [[ -n $string ]] && echo "$string"

}

export -f duration

# Don't remember where I got this. Returns true if the current terminal can do
# 256 colors, otherwise it returns false.
can256() { [ "$(tput Co 2>/dev/null || tput colors 2>/dev/null || echo 0)" -gt 2 ]; }

# bash-completion for aliases
# https://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases
# http://ubuntuforums.org/showthread.php?t=733397

# alias gco='git checkout'
# make-completion-wrapper _git _git_checkout git checkout
# complete -F _git_checkout gco

# This doesn't work. At least for git.

# See also:
# https://stackoverflow.com/questions/342969/how-do-i-get-bash-completion-to-work-with-aliases

# shellcheck disable=SC2124,2027
function make-completion-wrapper() {
  local function_name="$2"
  local arg_count=$(($# - 3))
  local comp_function_name="$1"
  shift 2
  local function="
    function $function_name {
      ((COMP_CWORD+=$arg_count))
      COMP_WORDS=( $@ \${COMP_WORDS[@]:1} )
      "$comp_function_name"
      return 0
    }"
  eval "$function"
  echo "$function_name"
  echo "$function"
}

debug "Exiting ..."
