#!/bin/bash

# Most of this git functionality came from
# https://gist.github.com/623142

# If you want/need multiple repository checking,
# have a look at http://glandium.org/blog/?p=170

git_normal_color=$(ansi fg green)
git_unstaged_color=$(ansi fg yellow)
git_staged_color=$(ansi fg red)
git_push_color=$(ansi bg red fg yellow)
git_pull_color=$(ansi bg red fg yellow)
git_pull_text='PULL'
git_push_text='PUSH'

if command -v git &>/dev/null; then

  # Currently known location(s) for git-prompt.sh
  if [ -f /usr/share/git/completion/git-prompt.sh ]; then
    # shellcheck disable=SC1091
    source /usr/share/git/completion/git-prompt.sh

  fi

  # shellcheck disable=SC2034
  function __git_status() {
    debug "Entering ${FUNCNAME[0]} ..."

    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWSTASHSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWUPSTREAM="auto"

    info=$(__git_ps1 '%s')

    if [ -n "${info}" ]; then

      branch=$(echo "$info" | perl -ane '$F[0]=~s/[<>=]$//;print $F[0]')
      unstaged=$(echo "$info" | perl -ane 'print $F[1]=~/\*/')
      staged=$(echo "$info" | perl -ane 'print $F[1]=~/\+/')
      stashed=$(echo "$info" | perl -ane 'print $F[1]=~/\$/')
      untracked=$(echo "$info" | perl -ane 'print $F[1]=~/\%/')
      behind=$(echo "$info" | perl -ane 'print $F[1]=~/\</ || $F[0]=~/\<$/')
      ahead=$(echo "$info" | perl -ane 'print $F[1]=~/\>/ || $F[0]=~/\>$/')

      status_color="$git_normal_color"
      if [ -n "$unstaged" ]; then status_color="$git_unstaged_color"; fi
      if [ -n "$staged" ]; then status_color="$git_staged_color"; fi

      upstream=
      if [ -n "$behind" ]; then upstream=" $git_pull_color$git_pull_text$(ansi off)"; fi
      if [ -n "$ahead" ]; then upstream=" $git_push_color$git_push_text$(ansi off)"; fi

      repo=
      if [[ $(git rev-parse --is-bare-repository) == 'false' ]]; then
        repo="$(basename "$(git rev-parse --show-toplevel)"): "
      fi

      printf ' %s(%s%s%s)%s' "$status_color" "$repo" "$branch" "$upstream" "$(ansi off)"

    fi

    debug "... exiting ${FUNCNAME[0]}."

  }

else
  function __git_status() { printf ''; }

fi
