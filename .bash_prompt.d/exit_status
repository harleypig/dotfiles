#!/bin/bash

debug "Setting up exit_status ..."

# Change these to whatever you want to be displayed for good and bad exit
# statuses.

function __exit_status() {

  debug "Entering ${FUNCNAME[0]} ..."
  debug "parms: $*"

  good_exit_text=':)'
  bad_exit_text=':('

  local -a status

  for s in "$@"; do

    # Wrap the exit symbols in appropriate ansi codes.

    # If a command is still writing to the pipe and a later command exits, the
    # first command will exit with a status of 141.  This causes confusion
    # with commands like echo or head.

    # Doing this *will* cause confusion if something does exit abnormally but
    # doesn't throw an appropriate exit status.

    debug "s: $s"

    case "$s" in
      0 | 141) status+=("$(ansi bg blue fg yellow)$good_exit_text$(ansi off)") ;;
      *) status+=("$(ansi bg red fg white)$bad_exit_text$(ansi off)") ;;
    esac

  done

  statuscodes=$(join_array ' | ' 'status')

  debug "... exiting ${FUNCNAME[0]}."
  echo "$statuscodes"

}

debug "... done setting up exit_status."
