#!/bin/bash

# Ideas ripped off and made to fit from:
#   http://wiki.archlinux.org/index.php/Color_Bash_Prompt
#   http://www.termsys.demon.co.uk/vtansi.htm
#   https://gist.github.com/621452
#   https://gist.github.com/623142

# XXX: Incorporate this somehow?
#      https://www.commandlinefu.com/commands/view/7916/put-a-console-clock-in-top-right-corner

#----------------------------------------------------------------------------
function _parent() {

  local parents

  parents=$(pstree -A $PPID 2> /dev/null) || { return 1; }

  parents=${parents/%-+*/}
  parents=${parents//---bash/}
  parents=${parents//---pstree/}
  parents=${parents//gnome-terminal-/}
  parents=${parents//tmux/}
  parents=${parents//sshd/}
  parents=${parents//login/}
  parents=${parents//: server/}

  [[ -n $parents ]] \
    && printf '\[%s\](%s)\[%s\] ' "$(ansi -n fg bright_yellow bg red)" "$parents" "$(ansi -n off)"

}

#----------------------------------------------------------------------------
function _exit_status() {
  local good_exit_text=':)'
  local bad_exit_text=':('

  local -a status

  local s

  for s in "$@"; do

    # Wrap the exit symbols in appropriate ansi codes.

    # If a command is still writing to the pipe and a later command exits, the
    # first command will exit with a status of 141.  This causes confusion
    # with commands like echo or head.

    # Doing this *will* cause confusion if something does exit abnormally but
    # doesn't throw an appropriate exit status.

    case "$s" in
      0 | 141) status+=("$(ansi -n bg blue fg yellow)$good_exit_text$(ansi -n off)") ;;
      *) status+=("$(ansi -n bg red fg white)$bad_exit_text$(ansi -n off)") ;;
    esac
  done

  local statuscodes
  statuscodes=$(join_array ' | ' 'status')

  printf '\[%s\]' "$statuscodes"
}

#----------------------------------------------------------------------------
_update_prompt() {

  # don't use 'local exit_status' here because it wipes out PIPESTATUS.
  exit_status=$(_exit_status "${PIPESTATUS[@]}")

  # Build the prompt.
  local prompt_color color_off user hostname system_reboot pacman_status

  prompt_color="\[$(ansi -n fg cyan)\]"
  color_off="\[$(ansi -n off)\]"

  user="$(ansi -n fg bright_cyan)\u${prompt_color}"
  [[ $USER == 'root' ]] && user="$(ansi -n fg bright_red)\u"

  hostname="$(ansi -n fg yellow)\h${prompt_color}"

  system_reboot="$(system_needs_reboot)"
  pacman_status="$(pacman_status)"

  # Append the last command, clear the history cache and reread the history file
  PS1="${color_off}$(
    history -a
    history -c
    history -r
  )\n${prompt_color}"

  [[ -n $system_reboot ]] && PS1+="${system_reboot}\n"
  [[ -n $pacman_status ]] && PS1+="${pacman_status}\n"
  PS1+="$(_parent)${user}@${hostname}: $(dir_readable)${color_off}$(git_status)\n"
  PS1+="${exit_status} $ "

  unset exit_status
}

[[ -n $PS1 ]] && PROMPT_COMMAND='_update_prompt'
