#!/bin/bash

debug "Entering .bash_prompt ..."

# Ideas ripped off and made to fit from:
#   http://wiki.archlinux.org/index.php/Color_Bash_Prompt
#   http://www.termsys.demon.co.uk/vtansi.htm
#   https://gist.github.com/621452
#   https://gist.github.com/623142

# shellcheck disable=SC1091
source_dir "$DOTFILES/.bash_prompt.d"

#----------------------------------------------------------------------------
function _parent_process() {

  local parents

  parents=$(pstree -A $PPID 2> /dev/null) || { return 1; }

  parents=${parents/%-+*/}
  parents=${parents//tmux/}
  parents=${parents//sshd/}
  parents=${parents//---bash/}
  parents=${parents//---pstree/}
  parents=${parents//gnome-terminal-/}
  parents=${parents//: server/}

  [[ -n $parents ]] \
    && printf '\[%s\](%s)\[%s\] ' "$(ansi fg bright_yellow bg red)" "$parents" "$(ansi off)"

}

#----------------------------------------------------------------------------
function _exit_status() {
  good_exit_text=':)'
  bad_exit_text=':('

  local -a status

  for s in "$@"; do

    # Wrap the exit symbols in appropriate ansi codes.

    # If a command is still writing to the pipe and a later command exits, the
    # first command will exit with a status of 141.  This causes confusion
    # with commands like echo or head.

    # Doing this *will* cause confusion if something does exit abnormally but
    # doesn't throw an appropriate exit status.

    case "$s" in
      0 | 141) status+=("$(ansi bg blue fg yellow)$good_exit_text$(ansi off)") ;;
      *) status+=("$(ansi bg red fg white)$bad_exit_text$(ansi off)") ;;
    esac
  done

  statuscodes=$(join_array ' | ' 'status')

  printf '\[%s\]' "$statuscodes"
}

#----------------------------------------------------------------------------
_update_prompt() {

  # don't use 'local exit_status' here because it wipes out PIPESTATUS.
  exit_status=$(_exit_status "${PIPESTATUS[@]}")

  local cwd
  cwd=$(dir_readable)


  local pacman_status
  pacman_status=$(pacman_status)

  local parent
  parent=$(_parent_process)

  local vcs
  vcs=$(__git_status)

  #local versionline
  #versionline=$(__versions)

  #local sysinfo
  #sysinfo=$(__sysinfo)

  # Build the prompt.
  # shellcheck disable=SC1117
  {
    if [ "$USER" == 'root' ]; then
      user_color="\[$(ansi fg bright_red)\]"
    else
      user_color="\[$(ansi fg bright_cyan)\]"
    fi

    prompt_color="\[$(ansi fg cyan)\]"
    text_reset="\[$(ansi off)\]"
    text_yellow="\[$(ansi fg yellow)\]"

    # Append the last command, clear the history cache and reread the history file
    PS1="${text_reset}$(
      history -a
      history -c
      history -r
    )"

    PS1+="\n${prompt_color}${pacman_status}"
    PS1+="\n${parent}${user_color}\u${prompt_color}@${text_yellow}\H${prompt_color}: $(dir_readable)${text_reset}${vcs}"
    PS1+="\n${exit_status} $ "

    #PS1+="\n${parent}${parent:+ }${prompt_color}${datetime}"
    #PS1+="\n${sysinfo}"
    #PS1+="\n${versionline}"
    #PS1+="\n${pacman_status}"
    ##PS1+="\n\n${text_yellow}(tmux|ctl-a) new -s session_name | switch -t session_name | list-sessions${text_reset}"
    #PS1+="\n${user_color}\u${prompt_color}@${text_yellow}\H${prompt_color}: ${cwd}${text_reset}${vcs}"
    #PS1+="\n${exit_status} $ "
  }
}

[[ -n $PS1 ]] && PROMPT_COMMAND='_update_prompt'
