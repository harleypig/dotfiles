import atexit
import os
import readline
import subprocess
import sys

from pprint import pprint as pp

##############################################################################
# Determine the full path for the history file
if 'PYTHON_HISTORY' in os.environ:
    histfile = os.environ['PYTHON_HISTORY']

elif 'XDG_CONFIG_HOME' in os.environ:
    histfile = os.path.join(os.environ['XDG_CONFIG_HOME'], 'python', 'history')

else:
    histfile = os.path.expanduser('~/.python_history')

##############################################################################
# Ensure the history file exists and is readable, otherwise use the default
histdir = os.path.dirname(histfile)

if not os.path.isdir(histdir):
    try:
        os.makedirs(histdir)
    except OSError:
        histfile = os.path.expanduser('~/.python_history')

try:
    readline.read_history_file(histfile)
    h_len = readline.get_current_history_length()

except FileNotFoundError:
    open(histfile, 'wb').close()
    h_len = 0

##############################################################################
#-----------------------------------------------------------------------------
def save(prev_h_len, histfile):
    new_h_len = readline.get_current_history_length()
    readline.set_history_length(1000)
    readline.append_history_file(new_h_len - prev_h_len, histfile)

#-----------------------------------------------------------------------------
def get_prompt_part(command):
    try:
        return subprocess.check_output(command, shell=True, text=True).strip()
    except subprocess.CalledProcessError:
        return ''

#-----------------------------------------------------------------------------
def build_python_prompt():
    user_color = "\033[1;32m" if os.getuid() != 0 else "\033[1;31m"
    hostname_color = "\033[1;33m"
    cwd = os.getcwd()

    user = get_prompt_part('whoami')
    hostname = get_prompt_part('hostname')
    git_status = get_prompt_part('git-status')

    venv = os.environ.get('VIRTUAL_ENV', '')
    if venv:
        venv = f"({os.path.basename(venv)}) "

    prompt = f"\n{user_color}{user}@{hostname_color}{hostname}:{venv}{cwd}{git_status}\n>>> \033[0m"
    return prompt

sys.ps1 = build_python_prompt()
##############################################################################
atexit.register(save, h_len, histfile)
sys.ps1 = build_python_prompt()

print("Pretty printing is enabled. Use 'pp' instead of 'print' to pretty-print objects.")
