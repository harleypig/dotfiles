# shellcheck shell=bash

PROMPT_DIRTRIM=2

#-----------------------------------------------------------------------------
alias wget="wget --hsts-file="$XDG_CACHE_HOME/wget-hsts""

#-----------------------------------------------------------------------------
# http://www.commandlinefu.com/commands/view/7156/monitor-a-file-with-tail-with-timestamps-added
tailfile() { tail -f "$1" | xargs -IX printf "$(date -u)\\t%s\\n" X; }

# shellcheck disable=SC2164
md() { mkdir -p "$@" && cd "$@" || return; }

#-----------------------------------------------------------------------------
shopt -s autocd cdspell direxpand dirspell globstar cdable_vars checkhash \
  checkwinsize dotglob extglob nocaseglob 2> /dev/null

umask 022

# System
#-----------------------------------------------------------------------------
# Aider Environment Variables:
# AIDER_API_KEY: The API key for accessing the Aider service. [env var: AIDER_API_KEY]
# AIDER_MODEL: The model to use for Aider operations. [env var: AIDER_MODEL]
# AIDER_CHAT_HISTORY_FILE: The file to store chat history. [env var: AIDER_CHAT_HISTORY_FILE]
# AIDER_OUTPUT_FORMAT: The format for Aider's output. [env var: AIDER_OUTPUT_FORMAT]
# AIDER_GIT_COMMIT_MESSAGE: The commit message to use for Aider's git operations. [env var: AIDER_GIT_COMMIT_MESSAGE]
# AIDER_LOG_LEVEL: The log level for Aider's logging. [env var: AIDER_LOG_LEVEL]
# AIDER_TIMEOUT: The timeout setting for Aider operations. [env var: AIDER_TIMEOUT]
# AIDER_API_BASE_URL: The base URL for the Aider API. [env var: AIDER_API_BASE_URL]
# AIDER_PROXY: The proxy settings for Aider. [env var: AIDER_PROXY]
# AIDER_CACHE_DIR: The directory to store Aider's cache. [env var: AIDER_CACHE_DIR]
# AIDER_CONFIG_FILE: The configuration file for Aider. [env var: AIDER_CONFIG_FILE]
# AIDER_LOG_FILE: The file to store Aider's logs. [env var: AIDER_LOG_FILE]
# AIDER_MAX_RETRIES: The maximum number of retries for Aider operations. [env var: AIDER_MAX_RETRIES]
# AIDER_RETRY_DELAY: The delay between retries for Aider operations. [env var: AIDER_RETRY_DELAY]
# AIDER_SSL_VERIFY: Whether to verify SSL certificates for Aider. [env var: AIDER_SSL_VERIFY]
# AIDER_TIMEOUT_CONNECT: The connection timeout for Aider. [env var: AIDER_TIMEOUT_CONNECT]
# AIDER_TIMEOUT_READ: The read timeout for Aider. [env var: AIDER_TIMEOUT_READ]
# AIDER_TIMEOUT_TOTAL: The total timeout for Aider operations. [env var: AIDER_TIMEOUT_TOTAL]
# AIDER_USER_AGENT: The user agent string for Aider. [env var: AIDER_USER_AGENT]
#-----------------------------------------------------------------------------

alias aider-help='aider --help'
alias c='clear'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias df='df -h'
alias h='history'
#alias rd=rmdir
#alias v='vim'
#alias f='find'

#-----------------------------------------------------------------------------
alias dumppath='echo -e ${PATH//:/\\n}'
alias dumpldpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'
alias dotfiles='cd $DOTFILES'

#-----------------------------------------------------------------------------
# CVS settings
export CVS_RSH='ssh'

#-----------------------------------------------------------------------------
# https://wiki.archlinux.org/index.php/Core_Utilities#ls
eval $(dircolors -b)

alias l='ls -Al --color=auto'
alias sl=ls

#-----------------------------------------------------------------------------
alias diffdir='diff -qr'

if command -v colordiff &> /dev/null; then
  alias diff='colordiff'
  alias diffdir='colordiff -qr'
fi

#-----------------------------------------------------------------------------
# https://wiki.archlinux.org/index.php/Core_Utilities#grep
export GREP_COLOR="1;33"
alias grep='grep --color=auto'
alias g='grep --color=auto'

#-----------------------------------------------------------------------------
# I got this from a co-worker many moons ago. Unfortunately, I don't remember
# who. Basically, if a tree program is not installed, fake it with this.

! command -v tree &> /dev/null \
  && alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

#-----------------------------------------------------------------------------
# https://unix.stackexchange.com/a/584733/9032

# Revalidate for another 15 minutes
# Echo expanded command
# Run expanded command

function sudo() {
  command sudo -v

  if [[ $(type -t "$1") == "alias" ]]; then
    set -- bash -ic "$(alias "$1"); $(printf "%q " "$@")"
  fi

  echo "Executing: sudo $*"

  # and do it
  command sudo "$@"
}

#-----------------------------------------------------------------------------
mkdir -p "$XDG_CACHE_HOME/bash"
HISTFILE="$XDG_CACHE_HOME/bash/history"

HISTCONTROL="erasedups:ignoreboth"
HISTFILESIZE=100000
HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"
HISTSIZE=500000
HISTTIMEFORMAT='%F %T '

shopt -s cmdhist histappend histreedit histverify

alias h='history'

#-----------------------------------------------------------------------------
command -v chromium-browser &> /dev/null && export BROWSER='chromium-browser'
export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"

#-----------------------------------------------------------------------------

# This overrides local ansible.cfg
#export ANSIBLE_CONFIG="${XDG_CONFIG_HOME}/ansible.cfg"

#-----------------------------------------------------------------------------
command -v plandex &> /dev/null \
  && source "$XDG_CONFIG_HOME/completions/plandex"

#-----------------------------------------------------------------------------
# Mimic Zsh run-help ability
# Press alt+h to get help for word on cursor
# https://wiki.archlinux.org/title/Bash#Mimic_Zsh_run-help_ability
# See inputrc for macros
#run-help() { help "$READLINE_LINE" 2>/dev/null || man "$READLINE_LINE"; }

#-----------------------------------------------------------------------------
# binenv

if command -v binenv &> /dev/null; then
  BINENV_BINDIR="/home/harleypig/.local/bin"
  BINENV_CACHEDIR="/home/harleypig/.cache/binenv"
  BINENV_CONFDIR="/home/harleypig/projects/dotfiles/config/binenv"

  source <(binenv completion bash)
fi

#-----------------------------------------------------------------------------
# Vault

vaultpath="$(command -v vault 2> /dev/null)"

if [[ -n vaultpath ]]; then
  complete -C "$vaultpath" vault
fi

unset vaultpath

#-----------------------------------------------------------------------------
