# shellcheck shell=bash

[[ -x "$(command -v terraform)" ]] || return 0

mkdir -p "$XDG_CACHE_HOME/terraform"
export TF_CLI_CONFIG_FILE="$XDG_CONFIG_HOME/terraform/terraformrc"

# Set up bash completion for Terraform if possible
if type _init_completion &>/dev/null; then
  complete -C "$(command -v terraform)" terraform

  # Generic function to autocomplete Terraform subcommand parameters
  _terraform_subcommand_options() {
    local cur prev words cword
    _init_completion -n = || return

    # The current subcommand is the word before the current word
    local subcommand="${words[$cword-1]}"

    # Extract options for the subcommand from the help output after the 'Options:' header
    local subcommand_options=$(terraform "$subcommand" -h 2>/dev/null \
      | awk '/Options:/{flag=1; next} /^\s*-/ && flag {print $1}' \
      | tr '\n' ' ')

    # Offer the extracted options as completions
    if [[ "$cur" == -* ]]; then
      COMPREPLY=($(compgen -W "$subcommand_options" -- "$cur"))
    fi
  }

  # Register the generic function for Terraform subcommands that have the same options format
  complete -F _terraform_subcommand_options terraform
fi
