#!/bin/bash

# Environment variables for perl and perl related stuff

command -v perl &> /dev/null || return 0

#-----------------------------------------------------------------------------
setup_perlbrew() {
  command -v perlbrew &> /dev/null || return 0

  ### completion
  # XXX: Check for completion capability
  [[ -f $PERLBREW_ROOT/etc/perlbrew-completion.bash ]] \
    && source "$PERLBREW_ROOT/etc/perlbrew-completion.bash"

  if [[ -d $HOME/perl5 ]]; then
    export PERLBREW_HOME=$HOME
  elif [[ -d /opt/perl5 ]]; then
    export PERLBREW_HOME=/opt
  fi

  if [[ -n $PERLBREW_HOME ]]; then
    export PERL5LIB="$PERLBREW_HOME/lib/perl5:$PERL5LIB"
    export PERLBREW_ROOT="$PERLBREW_HOME/perl5"
    export PERL_LOCAL_LIB_ROOT="$PERLBREW_HOME:$PERL_LOCAL_LIB_ROOT"
    export PERL_MB_OPT="--install_base \"$PERLBREW_HOME\""
    export PERL_MM_OPT="INSTALL_BASE=$PERLBREW_HOME"

    PATH="$PERLBREW_HOME/bin:$PATH"

    [[ -d $PERLBREW_ROOT/bin ]] && PATH="$PATH:$PERLBREW_ROOT/bin"

    export PATH
  fi
}

#-----------------------------------------------------------------------------
setup_dzil() {
  command -v dzil &> /dev/null || return 0

  # Run author or release tests, or a single test
  alias dztestauthor="AUTHOR_TESTING=1 dzil run prove -l"
  alias dztestauthorv="AUTHOR_TESTING=1 dzil run prove -lv"
  alias dztestauthorall="AUTHOR_TESTING=1 dzil run prove -l xt/author/*.t"
  alias dztestrelease="RELEASE_TESTING=1 dzil run prove -l"
  alias dztestreleasev="RELEASE_TESTING=1 dzil run prove -lv"
  alias dztestreleaseall="RELEASE_TESTING=1 dzil run prove -l xt/release/*.t"
  alias dztesttest="dzil run prove -l"
  alias dztesttestv="dzil run prove -lv"

  alias authordeps="dzil authordeps"
  alias listdeps="dzil listdeps"

  # XXX: test if bakeini is installed
  #if (perldoc -l Dist::Zilla::App::Command::bakeini >/dev/null 2>&1); then
  perl -MDist::Zilla::App::Command::bakeini -e '' &> /dev/null && alias bakeini="dzil bakeini"
  #fi
}

#-----------------------------------------------------------------------------
setup_prove() {
  command -v prove &> /dev/null || return 0

  # Run author or release tests, or a single test
  alias testauthor='AUTHOR_TESTING=1 prove -l'
  alias testauthorv='AUTHOR_TESTING=1 prove -lv'
  alias testauthorall='AUTHOR_TESTING=1 prove -l xt/author/*.t'
  alias testrelease='RELEASE_TESTING=1 prove -l'
  alias testreleasev='RELEASE_TESTING=1 prove -lv'
  alias testreleaseall='RELEASE_TESTING=1 prove -l xt/release/*.t'
  alias testtest='prove -l'
  alias testtestv='prove -lv'
}

#-----------------------------------------------------------------------------
wtf_am_i_doing_here() {
  return 0

  ### bash completion related setup
  if [[ -f /home/harleypig/.config/shcompgen.bashrc ]]; then
    # shellcheck disable=SC1091
    source /home/harleypig/.config/shcompgen.bashrc
  else

    COMPLETION_UTIL="$COMPLETION_UTIL pmbin"
    COMPLETION_UTIL="$COMPLETION_UTIL pmcat"
    COMPLETION_UTIL="$COMPLETION_UTIL pmchkver"
    COMPLETION_UTIL="$COMPLETION_UTIL pmcore"
    COMPLETION_UTIL="$COMPLETION_UTIL pmcost"
    COMPLETION_UTIL="$COMPLETION_UTIL pmdoc"
    COMPLETION_UTIL="$COMPLETION_UTIL pmedit"
    COMPLETION_UTIL="$COMPLETION_UTIL pminfo"
    COMPLETION_UTIL="$COMPLETION_UTIL pmless"
    COMPLETION_UTIL="$COMPLETION_UTIL pmlines"
    COMPLETION_UTIL="$COMPLETION_UTIL pmlist"
    COMPLETION_UTIL="$COMPLETION_UTIL pmman"
    COMPLETION_UTIL="$COMPLETION_UTIL pmpath"
    COMPLETION_UTIL="$COMPLETION_UTIL pmstripper"
    COMPLETION_UTIL="$COMPLETION_UTIL pmuninst"
    COMPLETION_UTIL="$COMPLETION_UTIL pmversion"
    COMPLETION_UTIL="$COMPLETION_UTIL pmxs"
    COMPLETION_UTIL="$COMPLETION_UTIL podpath"

    for CU in $COMPLETION_UTIL; do
      command -v "$CU" &> /dev/null && complete -C "$CU" "$CU"
    done
  fi
}

#-----------------------------------------------------------------------------
# https://metacpan.org/module/Catalyst::Manual::Tutorial::07_Debugging#DEBUGGING-MODULES-FROM-CPAN
# shellcheck disable=2154
alias cmver="perl -e'for(@ARGV){\$v=eval\"require \$_\"?(\$_->VERSION||q(unknown)):q(not installed);print\"\$_ \$v\\n\"}'"

# replace perldoc with cpandoc if it's installed
command -v cpandoc &> /dev/null && alias perldoc='cpandoc'

#echo "What does perldoc-complete do? Fix this!"
#perldoc='/home/harleypig/projects/bash-completion/perldoc-complete/perldoc-complete'
#completion="complete -C $perldoc -o nospace -o default perldoc"
#[[ -f $perldoc ]] && $completion

# Alias cpanm -S only if cpanm is installed and it's not installed in the home directory.
command -v cpanm &> /dev/null && {
  [[ $(which cpanm) != $HOME/* ]] && alias cpanm='cpanm -S'
}

setup_perlbrew
setup_dzil
setup_prove
