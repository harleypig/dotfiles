##################################################################################
# Core

[user]
  email = harleypig@harleypig.com
  name  = Alan Young

#[credential]
#  #helper = creds-helper
#  helper = /cygdrive/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe

[include]
  path = ../../gitconfig.user

[core]
  compression  = 9
  editor       = vim
  pager        = less -FIJRWX
  safecrlf     = true
  filemode     = true
  autocrlf     = false
  eol          = lf

[apply]
  ignorewhitespace = change
  whitespace       = fix

[init]
  defaultBranch = master

[notes]
  displayRef = '*'

##################################################################################
# Transfer

[transfer]
  fsckobjects = true

[fetch]
  prune = true
  fsckobjects = false

[remote "origin"]
  prune = true
  pruneTags = true
  #fetch = +refs/tags/*:refs/tags/*
  #fetch = +refs/notes/*:refs/notes/*
  #push = +refs/heads/*:refs/heads/*
  #push = +refs/tags/*:refs/tags/*
  #push = +refs/notes/*:refs/notes/*

[push]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault
  #
  # push.default settings determine the default behavior of `git push` when no
  # refspec is explicitly given:
  #
  # nothing - Requires an explicit refspec to push; ideal for users who prefer
  # explicitness to avoid mistakes.
  #
  # current - Pushes the current branch to a branch with the same name on the
  # remote; suitable for both central and non-central workflows.
  #
  # upstream - Pushes the current branch to its upstream branch, typically
  # used in a central workflow where the push destination is the same as the
  # fetch source.
  #
  # simple - Pushes the current branch to a branch with the same name on the
  # remote only if it has the same name as the local branch. This is the
  # safest mode, recommended for beginners, and is the default setting since
  # Git 2.0.
  #
  # matching - Pushes all local branches that have the same name as remote
  # branches. This mode is not recommended for shared repositories as it
  # requires all corresponding branches to be ready for push.

  default = upstream
  followtags = true
  autoSetupRemote = true

##################################################################################
# Branch

[branch]
  autosetupmerge = true

[branch "master"]
  rebase = true

[rerere]
  enabled = true

[status]
  showuntrackedfiles = all

[stash]
  showpatch = true

[rebase]
  autostash = true
  autosquash = true

##################################################################################
# Diff

[diff]
  algorithm = minimal
  guitool   = gvimdiff
  renames   = copies
  tool      = vimdiff
  ignoreSubmodules = dirty

[difftool]
  prompt = false

[difftool "vimdiff"]
  cmd = vim -d \"$LOCAL\" \"$REMOTE\"

[difftool "gvimdiff"]
  cmd = gvim -d \"$LOCAL\" \"$REMOTE\"

##################################################################################
# Merge

[merge]
  tool = fugitive
  guitool = kdiff3
  conflictstyle = diff3

[mergetool]
  prompt = false

[mergetool "fugitive"]
  cmd = vim -f -c \"Gvdiff\" \"$MERGED\"

##################################################################################
# Misc

[github]
  user = harleypig

##################################################################################
# Color

# 'git help config', search for 'list of colors'
# Colors: <FG> [<BG>] [<ATTR>]
#  FG/BG: normal, black, red, green, yellow, blue, magenta, cyan and white
#   ATTR: bold, dim, ul, blink and reverse

[color]
  branch      = auto
  diff        = auto
  grep        = auto
  interactive = auto
  showbranch  = true
  status      = auto

[color "branch"]
#  FG/BG: normal, black, red, green, yellow, blue, magenta, cyan and white
#   ATTR: bold, dim, ul, blink and reverse

  current  = green reverse
  local    = cyan
  plain    = white
  remote   = blue
  upstream = blue reverse

[color "diff"]
#  FG/BG: normal, black, red, green, yellow, blue, magenta, cyan and white
#   ATTR: bold, dim, ul, blink and reverse

  commit     = white black reverse
  context    = white dim
  frag       = magenta bold
  func       = yellow black bold
  meta       = green
  new        = green bold
  old        = red
  whitespace = red dim

[color "status"]
  added     = green
  changed   = red
  untracked = yellow
  unmerged  = red dim

##################################################################################

[alias]
  # Show the defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # --- Adding ---
  a    = add
  aa   = add --all
  ai   = add --interactive
  au   = add -u

  # --- Removing from index ---
  unadd = reset --
  unstage = reset --

  # --- Branching ---
  b    = branch
  ba   = branch -a
  ball = branch -ar
  # Current branch
  bc   = "rev-parse --abbrev-ref HEAD"

  # --- Committing ---
  c    = commit
  cb   = commit --branch
  ci   = commit --interactive
  co   = checkout

  # --- Conflict resolution ---
  conflicted = "diff --name-only --diff-filter=U"

  # --- Diffing ---
  d    = diff --color --color-words --abbrev
  dc   = diff --color --color-words --abbrev --cached
  dd   = diff --color --color-words --abbrev --dirstat
  ds   = diff --color --color-words --abbrev --stat
  dt   = difftool

  # --- Fetching ---
  f    = fetch
  fa   = fetch --all
  fp   = fetch --prune

  # --- File operations ---
  find = !git ls-tree -r --name-only HEAD | grep --color $1
  ignore = !git status &> /dev/null && \
            echo $1 >> $(git rev-parse --show-toplevel)/.gitignore

  ignored = !git ls-tree --others -i --exclude-standard

  # --- Merging ---
  m    = merge

  # --- Pulling ---
  p    = pull

  # --- Pruning ---
  prune = fetch -prune
  prune-all = "!git remote | xargs -n 1 git remote prune"

  # --- Status ---
  s    = status
  ss   = status -s
  st   = status -sb


  # --- Tracking ---
  untrack = rm --cache --

  assumed     = "!git ls-files -v | grep ^h | cut -c 3-"
  assume      = update-index --assume-unchanged
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  unassume    = update-index --no-assume-unchanged
  wip         = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m 'wip'"

  # --- Logging ---
  l    = log --graph --abbrev-commit --date='format:%Y%m%d %H:%M:%S' --pretty=format:'%Cred%h %C(blue)%cd %C(bold magenta)|%Creset %s%C(yellow)%d %Cgreen(%cn) %Cblue%cr'

  # List changes for each commit
  lc   = log ORIG_HEAD.. --stat --no-merges

  lp   = log --graph --topo-order --pretty=format:'%h : (%aN) %s'
  logm = log --merges --decorate --date=short --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
  logn = log --decorate --numstat --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"

  # List new files for the incoming merge
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  changes = diff --name-status -r
  diffstat = diff --stat -r

  # Show latest vX.Y.Z tag
  latest-tag = !"git tag --list 'v*' --sort=-v:refname | head -n 1"
