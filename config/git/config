##################################################################################
# Identity and Core Settings

[user]
  email = harleypig@harleypig.com
  name  = Alan Young

[github]
  user = harleypig

# Cygwin Setup
# This setup depends on Git for Windows being installed. If you have installed
# it in a different location you'll need to adjust the path for the helper.
#
# Add the following section to your gitconfig.user file.
#
#[credential]
#  helper = /cygdrive/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe

[include]
  # See .gitconfig.user.template
  path = ../../gitconfig.user

[core]
  autocrlf    = false
  compression = 9
  editor      = vim
  eol         = lf
  filemode    = true
  fsmonitor   = true
  pager       = less -FIJRWX
  safecrlf    = true
  untrackedCache = true

##################################################################################
# Repository Initialization and Refs

[init]
  defaultBranch = master

[notes]
  displayRef = '*'

[tag]
  sort = -v:refname

[branch]
  autosetupmerge = true
  sort = -committerdate

[branch "master"]
  rebase = true

[stash]
  showpatch = true

##################################################################################
# Remote Operations

[transfer]
  fsckobjects = true

[fetch]
  all = true
  prune = true
  pruneTags = true
  fsckobjects = false

[remote "origin"]
  prune = true
  pruneTags = true
  fetch = +refs/tags/*:refs/tags/*
  fetch = +refs/notes/*:refs/notes/*

[push]
  default = current
  autoSetupRemote = true
  followtags = true

##################################################################################
# Change Management

[rerere]
  enabled = true
  gc = true
  expire = 90
  autoupdate = true

[rebase]
  autostash = true
  autosquash = true
  updaterefs = true

[merge]
  tool = fugitive
  guitool = kdiff3
  conflictstyle = zdiff3

[mergetool]
  prompt = false

[mergetool "fugitive"]
  cmd = vim -f -c \"Gvdiff\" \"$MERGED\"

[diff]
  algorithm = histogram
  colorMoved = dimmed-zebra
  colorMovedWS = ignore-all-space
  guitool = gvimdiff
  ignoreSubmodules = dirty
  mnemonicPrefix = true
  renames = copies
  tool = vimdiff

[difftool]
  prompt = false

[difftool "vimdiff"]
  cmd = vim -d \"$LOCAL\" \"$REMOTE\"

[difftool "gvimdiff"]
  cmd = gvim -d \"$LOCAL\" \"$REMOTE\"

##################################################################################
# Display and UI

[column]
  ui = auto

[status]
  showuntrackedfiles = all

# 'git help config', search for 'list of colors'
# Colors: <FG> [<BG>] [<ATTR>]
#  FG/BG: normal, black, red, green, yellow, blue, magenta, cyan and white
#   ATTR: bold, dim, ul, blink and reverse

[color "branch"]
  current  = green reverse
  local    = cyan
  plain    = white
  remote   = brightblue
  upstream = blue reverse

[color "diff"]
  commit     = white black reverse
  context    = white dim
  frag       = magenta bold
  func       = yellow black bold
  meta       = green
  new        = green bold
  old        = red
  whitespace = red dim

[color "status"]
  added     = green
  changed   = red
  untracked = yellow
  unmerged  = red dim

##################################################################################
# File Handling

[apply]
  ignorewhitespace = change
  whitespace       = fix

##################################################################################
# Aliases

[alias]
  # --- Information ---
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
  s    = status
  ss   = status -s
  st   = status -sb
  changes = diff --name-status -r

  # --- File Management ---
  find = !git ls-tree -r --name-only HEAD | grep --color $1
  ignore = !git status &> /dev/null && \
            echo $1 >> $(git rev-parse --show-toplevel)/.gitignore
  ignored = !git ls-files --others -i --exclude-standard
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'

  # --- File Tracking ---
  assume      = update-index --assume-unchanged
  assumed     = "!git ls-files -v | grep ^h | cut -c 3-"
  unassume    = update-index --no-assume-unchanged
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  untrack     = rm --cache --
  wip         = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m 'wip'"

  # --- Staging Management ---
  a    = add
  aa   = add --all
  ai   = add --interactive
  au   = add -u
  unadd = reset HEAD --     # Undo git add for listed files or all files
  unstage = reset HEAD^ --  # Undo last commit, specific files or all

  # --- Diffing ---
  d    = diff --color --color-words --abbrev
  dc   = diff --color --color-words --abbrev --cached
  dd   = diff --color --color-words --abbrev --dirstat
  ds   = diff --color --color-words --abbrev --stat
  dt   = difftool
  diffstat = diff --stat -r

  # --- Committing ---
  c    = commit
  ca   = commit --amend
  cb   = commit --branch
  ci   = commit --interactive
  cm   = commit -m
  out  = "log @{u}.."      # Show commits not pushed to upstream

  # --- Branching ---
  b    = branch
  ba   = branch -a
  bc   = "rev-parse --abbrev-ref HEAD"  # Current branch
  co   = checkout

  # --- Remote Operations ---
  f    = fetch
  pl   = pull
  m    = merge

  # --- Conflict Resolution ---
  conflicted = "diff --name-only --diff-filter=U"

  # --- Information ---
  root = rev-parse --show-toplevel    # Show repository root directory
  remotes = remote -v                 # List remotes with URLs

  # --- Branching ---
  bm = branch --merged               # Show merged branches
  bnm = branch --no-merged          # Show unmerged branches
  bd = branch -d                    # Delete branch if merged
  bD = branch -D                    # Force delete branch

  # --- Committing ---
  amend = commit --amend --no-edit  # Amend commit without editing message
  undo = reset --soft HEAD^         # Undo last commit keeping changes staged

  # --- History ---
  last = log -1 HEAD                # Show last commit
  graph = log --graph --oneline     # Compact graph view
  search = log -p -S               # Search commit contents
  since = log --since              # Show commits since date
  until = log --until              # Show commits until date
  l    = log --graph --abbrev-commit --date='format:%Y%m%d %H:%M:%S' --pretty=format:'%Cred%h %C(blue)%cd %C(bold magenta)|%Creset %s%C(yellow)%d %Cgreen(%cn) %Cblue%cr'
  lc   = log ORIG_HEAD.. --no-merges --pretty=format:'%Cred%h%Creset %s%C(yellow)%d%Creset'  # Changes since branch point
  lm = log --merges --decorate --date=short --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
  ln = log --decorate --numstat --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
  latest-tag = !"git tag --list 'v*' --sort=-v:refname | head -n 1"
